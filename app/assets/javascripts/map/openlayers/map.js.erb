this.Openlayers_Map = (function () {
  function Openlayers_Map(canvas, opts) {
    if (opts == null) {
      opts = {};
    }
    this.canvas = canvas;
    this.opts = opts;
    if (! this.opts.zoom) {
      this.opts.zoom = Openlayers_Map.defaultZoom;
    }
    this.markerFeature = null;
    this.markerLayer = null;
    this.popup = null;
    this.markerIcon = '/assets/img/map-marker.png';
    this.render();
  }

  Openlayers_Map.defaultZoom = 10;

  Openlayers_Map.prototype.render = function () {
    this.initMap();
    this.initPopup();
    if (this.opts['markers']) {
      this.renderMarkers(this.opts['markers']);
    }
    this.resize();
    return this.renderEvents();
  };

  Openlayers_Map.prototype.createLayers = function (layerOpts) {
    var i, layer, layers, len, opts, projection, source, url;
    layers = [];
    for (i = 0, len = layerOpts.length; i < len; i++) {
      opts = layerOpts[i];
      source = opts["source"];
      url = opts["url"];
      projection = opts["projection"];
      layer = new ol.layer.Tile({
        source: new ol.source[source]({
          url: url,
          projection: projection
        })
      });
      layers.push(layer);
    }
    return layers;
  };

  Openlayers_Map.prototype.initMap = function () {
    var center, layerOpts;
    center = this.opts['center'] || [138.252924, 36.204824];
    layerOpts = this.opts['layers'];
    layerOpts || (layerOpts = [
      {
        source: "XYZ",
        url: "http://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png",
        projection: "EPSG:3857"
      }
    ]);
    return this.map = new ol.Map({
      target: this.canvas,
      renderer: ['canvas', 'dom'],
      layers: this.createLayers(layerOpts),
      controls: ol.control.defaults({
        attributionOptions: {
          collapsible: false
        }
      }),
      view: new ol.View({
        projection: "EPSG:3857",
        center: ol.proj.transform(center, "EPSG:4326", "EPSG:3857"),
        maxZoom: 18,
        zoom: this.opts['zoom']
      }),
      logo: true
    });
  };

  Openlayers_Map.prototype.initPopup = function () {
    $("body").append('<div id="marker-popup"><div class="closer"></div><div class="content"></div></div>');
    this.popup = $('#marker-popup');
    this.popup.hide();
    this.popupOverlay = new ol.Overlay({
      element: this.popup.get(0),
      autoPan: true,
      autoPanAnimation: {
        duration: 250
      }
    });
    this.map.addOverlay(this.popupOverlay);
    this.map.on('pointermove', (function (_this) {
      return function (e) {
        var cursor, hit, pixel;
        if (e.dragging) {
          _this.popup.hide();
          return;
        }
        pixel = _this.map.getEventPixel(e.originalEvent);
        hit = _this.map.hasFeatureAtPixel(pixel);
        cursor = hit ? 'pointer' : '';
        return _this.map.getTarget().style.cursor = cursor;
      };
    })(this));
    return this.popup.find('.closer').on('click', (function (_this) {
      return function (e) {
        _this.popupOverlay.setPosition(void 0);
        $(_this).blur();
        return false;
      };
    })(this));
  };

  Openlayers_Map.prototype.showPopup = function (feature, coordinate) {
    var markerHtml;
    markerHtml = feature.get("markerHtml");
    if (!markerHtml) {
      this.popup.hide();
      return;
    }
    this.popup.find('.content').html(markerHtml);
    this.popup.show();
    return this.popupOverlay.setPosition(coordinate);
  };

  Openlayers_Map.prototype.renderEvents = function () {
    return this.map.on('click', (function (_this) {
      return function (e) {
        var feature;
        feature = _this.map.forEachFeatureAtPixel(e.pixel, function (feature, layer) {
          return feature;
        });
        if (feature) {
          _this.showPopup(feature, e.coordinate);
        }
      };
    })(this));
  };

  Openlayers_Map.prototype.createMarkerStyle = function (iconSrc) {
    return new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [0.5, 1],
        anchorXUnits: 'fraction',
        anchorYUnits: 'fraction',
        src: iconSrc
      })
    });
  };

  Openlayers_Map.prototype.setMarker = function (loc, opts) {
    var feature, iconSrc, pos, ref, ref1, ref2, style;
    if (opts == null) {
      opts = {};
    }
    iconSrc = this.markerIcon;
    if (opts['image']) {
      iconSrc = opts['image'];
    }
    style = this.createMarkerStyle(iconSrc);
    pos = [opts['loc'][1], opts['loc'][0]];
    feature = new ol.Feature({
      geometry: new ol.geom.Point(ol.proj.transform(pos, "EPSG:4326", "EPSG:3857")),
      markerId: (ref = opts['id']) != null ? ref : null,
      markerHtml: (ref1 = opts['html']) != null ? ref1 : null,
      category: (ref2 = opts['category']) != null ? ref2 : null,
      iconSrc: iconSrc
    });
    feature.setStyle(style);
    if (!this.markerLayer) {
      this.markerLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
          features: [feature]
        })
      });
      this.map.addLayer(this.markerLayer);
    } else {
      this.markerLayer.getSource().addFeature(feature);
    }
    return feature;
  };

  Openlayers_Map.prototype.getMarker = function (markerId) {
    var ret, source;
    ret = null;
    if (!this.markerLayer) {
      return ret;
    }
    source = this.markerLayer.getSource();
    source.forEachFeature(function (feature) {
      if (feature.get("markerId") === markerId) {
        return ret = feature;
      }
    });
    return ret;
  };

  Openlayers_Map.prototype.getMarkers = function () {
    var features, source;
    source = this.markerLayer.getSource();
    features = source.getFeatures();
    return features;
  };

  Openlayers_Map.prototype.setCenter = function (pos) {
    return this.map.getView().setCenter(ol.proj.transform(pos, 'EPSG:4326', 'EPSG:3857'));
  };

  Openlayers_Map.prototype.setZoom = function (level) {
    return this.map.getView().setZoom(level);
  };

  Openlayers_Map.prototype.renderMarkers = function (markers) {
    var feature, iconSrc, id, marker, markerHtml, name, pos, ref, ref1, ref2, results, style, text;
    results = [];
    for (id in markers) {
      marker = markers[id];
      iconSrc = '/assets/img/map-marker.png';
      if (marker['image']) {
        iconSrc = marker['image'];
      }
      style = this.createMarkerStyle(iconSrc);
      markerHtml = "";
      name = marker['name'];
      text = marker['text'];
      if (name) {
        markerHtml += '<p>' + name + '</p>';
      }
      if (text) {
        $.each(text.split(/[\r\n]+/), function () {
          if (this.match(/^https?:\/\//)) {
            return markerHtml += '<p><a href="' + this + '">' + this + '</a></p>';
          } else {
            return markerHtml += '<p>' + this + '</p>';
          }
        });
      }
      pos = [marker['loc'][1], marker['loc'][0]];
      feature = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform(pos, "EPSG:4326", "EPSG:3857")),
        markerId: (ref = marker['id']) != null ? ref : id,
        markerHtml: (ref1 = marker['html']) != null ? ref1 : markerHtml,
        category: (ref2 = marker['category']) != null ? ref2 : null,
        iconSrc: iconSrc
      });
      feature.setStyle(style);
      if (!this.markerLayer) {
        this.markerLayer = new ol.layer.Vector({
          source: new ol.source.Vector({
            features: [feature]
          })
        });
        results.push(this.map.addLayer(this.markerLayer));
      } else {
        results.push(this.markerLayer.getSource().addFeature(feature));
      }
    }
    return results;
  };

  Openlayers_Map.prototype.resize = function () {
    var extent;
    if (!this.markerLayer) {
      return;
    }
    extent = this.markerLayer.getSource().getExtent();

    this.map.getView().fit(extent, this.map.getSize());
    if (this.map.getView().getZoom() > this.opts.zoom) {
      this.map.getView().setZoom(this.opts.zoom);
    }
  };

  return Openlayers_Map;
})();
