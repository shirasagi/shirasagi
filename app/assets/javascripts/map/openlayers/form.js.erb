this.Openlayers_Map_Form = (function () {
  var bind = function (fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };

  function Openlayers_Map_Form(canvas, opts) {
    if (opts == null) {
      opts = {};
    }
    this.clonePointForm = bind(this.clonePointForm, this);
    this.canvas = canvas;
    this.opts = opts;
    default_zoom = this.opts.default_zoom || Openlayers_Map.defaultZoom
    pointCount = this.opts.markers ? this.opts.markers.length : 0
    set_center_position = this.opts.set_center_position
    if (set_center_position) {
      set_center_position = set_center_position.split(',').map(Number);
      set_center_position = [set_center_position[1], set_center_position[0]];
      var lat, lon;
      lat = set_center_position[1];
      lon = set_center_position[0];
      if (!(lat && !isNaN(lat))) {
        set_center_position = null;
      }
      if (!(lon && !isNaN(lon))) {
        set_center_position = null;
      }
      if (lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
        set_center_position
      } else {
        set_center_position = null;
      }
    }
    set_zoom_level = this.opts.set_zoom_level
    this.markerFeature = null;
    this.markerLayer = null;
    this.popup = null;
    this.maxPointForm = 10;
    this.deleteMessage = "<%= I18n.t('map.confirm.delete_marker') %>";
    this.dataID = 0;
    this.markerIcon = '/assets/img/map-marker.png';
    this.clickIcon = '/assets/img/map-marker-click.png';
    this.clickMarkerId = null;
    this.render();
  }

  Openlayers_Map_Form.prototype.getMapLoc = function (ele) {
    var latlon;
    latlon = ele.val().split(',');
    return [parseFloat(latlon[0]), parseFloat(latlon[1])];
  };

  Openlayers_Map_Form.prototype.setMapLoc = function (ele, lat, lon) {
    lat = Math.ceil(lat * Math.pow(10, 6)) / Math.pow(10, 6);
    lon = Math.ceil(lon * Math.pow(10, 6)) / Math.pow(10, 6);
    ele.val(lat.toFixed(6) + "," + lon.toFixed(6));
  };

  Openlayers_Map_Form.prototype.render = function () {
    this.initMap();
    this.renderMarkers();
    this.initPopup();
    this.resize();
    this.renderEvents();
  };

  Openlayers_Map_Form.prototype.createLayers = function (layerOpts) {
    var j, layer, layers, len, opts, projection, source, url;
    layers = [];
    for (j = 0, len = layerOpts.length; j < len; j++) {
      opts = layerOpts[j];
      source = opts["source"];
      url = opts["url"];
      projection = opts["projection"];
      layer = new ol.layer.Tile({
        source: new ol.source[source]({
          url: url,
          projection: projection
        })
      });
      layers.push(layer);
    }
    return layers;
  };

  Openlayers_Map_Form.prototype.initMap = function () {
    var center, layerOpts;
    center = this.opts['center'] || [138.252924, 36.204824];
    if (set_center_position) {
      center = set_center_position
    }
    layerOpts = this.opts['layers'];
    layerOpts || (layerOpts = [
      {
        source: "XYZ",
        url: "https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png",
        projection: "EPSG:3857"
      }
    ]);
    this.maxPointForm = this.opts['max_point_form'] || 10;
    return this.map = new ol.Map({
      target: this.canvas,
      renderer: ['canvas', 'dom'],
      layers: this.createLayers(layerOpts),
      controls: ol.control.defaults({
        attributionOptions: {
          collapsible: false
        }
      }),
      view: new ol.View({
        projection: "EPSG:3857",
        center: ol.proj.transform(center, "EPSG:4326", "EPSG:3857"),
        minZoom: 3,
        maxZoom: 18,
        zoom: this.opts['zoom'] || 10
      }),
      logo: false
    });
  };

  Openlayers_Map_Form.prototype.initPopup = function () {
    $("body").append('<div id="marker-popup"><div class="closer"></div><div class="content"></div></div>');
    this.popup = $('#marker-popup');
    this.popup.hide();
    this.popupOverlay = new ol.Overlay({
      element: this.popup.get(0),
      autoPan: true,
      autoPanAnimation: {
        duration: 250
      }
    });
    this.map.addOverlay(this.popupOverlay);
    this.map.on('pointermove', (function (_this) {
      return function (e) {
        var cursor, hit, pixel;
        if (e.dragging) {
          _this.popup.hide();
          return;
        }
        pixel = _this.map.getEventPixel(e.originalEvent);
        hit = _this.map.hasFeatureAtPixel(pixel);
        cursor = hit ? 'pointer' : '';
        return _this.map.getTarget().style.cursor = cursor;
      };
    })(this));
    return this.popup.find('.closer').on('click', (function (_this) {
      return function (e) {
        _this.popupOverlay.setPosition(void 0);
        $(_this).blur();
        return false;
      };
    })(this));
  };

  Openlayers_Map_Form.prototype.renderMarkers = function () {
    return $(".mod-map dd.marker").each((function (_this) {
      return function (i, e) {
        var loc;
        $(e).attr("data-id", _this.dataID);
        if ($(e).find(".marker-loc").val() !== "") {
          loc = _this.getMapLoc($(e).find(".marker-loc"));
          _this.setMarker(loc, {
            id: parseInt(_this.dataID)
          });
        }
        //Map_Form.attachMessage(Map_Form.dataID)
        return _this.dataID += 1;
      };
    })(this));
  };

  Openlayers_Map_Form.prototype.showPopup = function (e, feature) {
    var markerHtml, markerId;
    markerId = feature.get("markerId");
    if (markerId !== 0 && !markerId) {
      this.popup.hide();
      return;
    }
    markerHtml = "";
    $('dd[data-id = "' + markerId + '"]').each(function () {
      var name, text;
      name = $(this).find(".marker-name").val();
      text = $(this).find(".marker-text").val();
      if (name) {
        markerHtml += '<p>' + name + '</p>';
      }
      if (text) {
        return $.each(text.split(/[\r\n]+/), function () {
          if (this.match(/^https?:\/\//)) {
            return markerHtml += '<p><a href="' + this + '">' + this + '</a></p>';
          } else {
            return markerHtml += '<p>' + this + '</p>';
          }
        });
      }
    });
    if (!markerHtml) {
      return;
    }
    this.popup.find('.content').html(markerHtml);
    this.popup.attr({
      dataId: markerId
    });
    this.popup.show();
    return this.popupOverlay.setPosition(e.coordinate);
  };

  Openlayers_Map_Form.prototype.setMarker = function (loc, opts) {
    var feature, pos, ref, ref1, ref2, src, style;
    if (opts == null) {
      opts = {};
    }
    src = this.markerIcon;
    if (opts['image']) {
      src = opts['image'];
    }
    style = new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [0.5, 1],
        anchorXUnits: 'fraction',
        anchorYUnits: 'fraction',
        src: src
      })
    });
    pos = [loc[1], loc[0]];
    feature = new ol.Feature({
      geometry: new ol.geom.Point(ol.proj.transform(pos, "EPSG:4326", "EPSG:3857")),
      markerId: (ref = opts['id']) != null ? ref : null,
      markerHtml: (ref1 = opts['html']) != null ? ref1 : null,
      category: (ref2 = opts['category']) != null ? ref2 : null
    });
    feature.setStyle(style);
    if (!this.markerLayer) {
      this.markerLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
          features: [feature]
        })
      });
      this.map.addLayer(this.markerLayer);
    } else {
      this.markerLayer.getSource().addFeature(feature);
    }
    return feature;
  };

  Openlayers_Map_Form.prototype.getMarker = function (markerId) {
    var ret, source;
    ret = null;
    if (!this.markerLayer) {
      return ret;
    }
    source = this.markerLayer.getSource();
    source.forEachFeature(function (feature) {
      if (feature.get("markerId") === markerId) {
        return ret = feature;
      }
    });
    return ret;
  };

  Openlayers_Map_Form.prototype.removeMarker = function (markerId) {
    var feature, source;
    feature = this.getMarker(markerId);
    if (feature) {
      source = this.markerLayer.getSource();
      source.removeFeature(feature);
      if (feature.get("markerId") === parseInt(this.popup.attr("dataId"))) {
        this.popup.hide();
      }
      return true;
    }
    return false;
  };

  Openlayers_Map_Form.prototype.renderEvents = function () {
    this.map.on('click', (function (_this) {
      return function (e) {
        var feature, pos, source;
        feature = _this.map.forEachFeatureAtPixel(e.pixel, function (feature, layer) {
          return feature;
        });
        if (feature) {
          _this.showPopup(e, feature);
          return;
        }
        if (_this.clickMarkerId) {
          feature = _this.getMarker(_this.clickMarkerId);
          source = _this.markerLayer.getSource();
          source.removeFeature(feature);
        }
        pos = ol.proj.transform(e.coordinate, "EPSG:3857", "EPSG:4326");
        while (pos[0] < 180) {
          pos[0] += 360;
        }
        while (pos[0] > 180) {
          pos[0] -= 360;
        }
        pos.reverse();
        _this.clickMarkerId = "click";
        _this.setMarker(pos, {
          image: _this.clickIcon,
          id: _this.clickMarkerId
        });
        return _this.setMapLoc($(".mod-map .clicked"), pos[0], pos[1]);
      };
    })(this));
    this.map.getView().on("propertychange", function(e) {
      if (e.key === 'resolution') {
        var zoom = this.getZoom();
        $('input[name="item[map_zoom_level]"]').val(zoom);
      }
    });
    $(".mod-map .add-marker").on('click', (function (_this) {
      return function (e) {
        _this.clonePointForm();
        return false;
      };
    })(this));
    $(".mod-map .clear-marker").on('click', (function (_this) {
      return function (e) {
        var ele;
        ele = e.target;
        _this.clearPointForm($(ele).closest("dd.marker"));
        return false;
      };
    })(this));
    $(".mod-map .set-center-position").on('click', (function (_this) {
      return function () {
        var latlng = ol.proj.transform(_this.map.getView().getCenter(), 'EPSG:3857', 'EPSG:4326');
        var lat = Math.floor((latlng[1] * 1000000)) / 1000000;
        var lng = Math.floor((latlng[0] * 1000000)) / 1000000;
        $(".center-input").val(lat + "," + lng);
        return false;
      };
    })(this));
    $(".mod-map .set-zoom-level").on('click', (function (_this) {
      return function () {
        $(".zoom-input").val(_this.map.getView().getZoom());
        return false;
      };
    })(this));
    $(".mod-map .set-marker").on('click', (function (_this) {
      return function (e) {
        var ele;
        ele = e.target;
        _this.createMarker($(ele).closest("dd.marker"));
        return false;
      };
    })(this));
    $(".mod-map .marker-name").on('keypress', function (e) {
      if (e.which === 13) {
        return false;
      }
    });
    $(".mod-map .marker-loc-input").on('keypress', function (e) {
      if (e.which === 13) {
        $(this).closest("dd.marker").find(".set-marker").trigger("click");
        return false;
      }
    });
    $(".mod-map .marker-loc-input").on('focus', (function (_this) {
      return function (e) {
        var feature, source;
        if (_this.clickMarkerId) {
          feature = _this.getMarker(_this.clickMarkerId);
          source = _this.markerLayer.getSource();
          source.removeFeature(feature);
          _this.clickMarkerId = null;
          return $(".mod-map .clicked").val("");
        }
      };
    })(this));
    return $(".location-search").hide();
  };

  Openlayers_Map_Form.prototype.clonePointForm = function () {
    var cln;
    if ($(".mod-map dd.marker").length < this.maxPointForm) {
      cln = $(".mod-map dd.marker:last").clone(false).insertAfter($(".mod-map dd.marker:last"));
      cln.attr("data-id", this.dataID);
      this.dataID += 1;
      cln.find("input,textarea").val("");
      cln.find(".marker-name").val("");
      cln.find(".clear-marker").on('click', (function (_this) {
        return function () {
          return _this.clearPointForm(cln);
        };
      })(this));
      cln.find(".set-marker").on('click', (function (_this) {
        return function () {
          return _this.createMarker(cln);
        };
      })(this));
      cln.find(".marker-name").on('keypress', (function (_this) {
        return function (e) {
          if (e.which === 13) {
            return false;
          }
        };
      })(this));
      cln.find(".marker-loc-input").on('keypress', function (e) {
        if (e.which === 13) {
          $(e.target).closest("dd.marker").find(".set-marker").trigger("click");
          return false;
        }
      });
      cln.find(".marker-loc-input").on('focus', (function (_this) {
        return function (e) {
          var feature, source;
          if (_this.clickMarkerId) {
            feature = _this.getMarker(_this.clickMarkerId);
            source = _this.markerLayer.getSource();
            source.removeFeature(feature);
            _this.clickMarkerId = null;
            return $(".mod-map .clicked").val("");
          }
        };
      })(this));
    }
    if ($(".mod-map dd.marker").length === this.maxPointForm) {
      $(".mod-map dd .add-marker").parent().hide();
    }
  };

  Openlayers_Map_Form.prototype.createMarker = function (ele) {
    var dataId, loc;
    loc = null;
    if ($(".mod-map .clicked").val() !== "") {
      loc = $(".mod-map .clicked").val();
    } else if (ele.find(".marker-loc-input").val() !== "") {
      if (Map_Form.validateLoc(ele.find(".marker-loc-input"))) {
        loc = ele.find(".marker-loc-input").val();
      } else {
        alert("<%= I18n.t('map.alert.invalid_location').join('\n') %>");
      }
    }
    if (!loc) {
      return;
    }
    ele.find(".marker-loc").val(loc);
    ele.find(".marker-loc-input").val(loc);
    dataId = parseInt(ele.attr("data-id"));
    this.removeMarker(dataId);
    return this.setMarker(this.getMapLoc(ele.find(".marker-loc")), {
      id: dataId
    });
  };

  Openlayers_Map_Form.prototype.clearPointForm = function (ele) {
    var dataId;
    if (ele.find(".marker-loc").val() !== "") {
      if (confirm(this.deleteMessage)) {
        dataId = parseInt(ele.attr("data-id"));
        this.removeMarker(dataId);
        ele.find("input,textarea").val("");
        if ($(".mod-map dd.marker").length > 1) {
          ele.remove();
        }
      }
    } else {
      dataId = parseInt(ele.attr("data-id"));
      this.removeMarker(dataId);
      ele.find("input,textarea").val("");
      if ($(".mod-map dd.marker").length > 1) {
        ele.remove();
      }
    }
    $(".mod-map dd .add-marker").parent().show();
  };

  Openlayers_Map_Form.prototype.resize = function () {
    var extent;
    if (pointCount == 1 && !set_center_position && !set_zoom_level) {
      extent = this.markerLayer.getSource().getExtent();
      this.map.getView().fit(extent, this.map.getSize());
      this.map.getView().setZoom(default_zoom);
      return;
    }

    if (pointCount == 1 && !set_center_position && set_zoom_level) {
      extent = this.markerLayer.getSource().getExtent();
      this.map.getView().fit(extent, this.map.getSize());
      this.map.getView().setZoom(set_zoom_level);
      return;
    }

    if (pointCount >= 2 && !set_center_position && !set_zoom_level) {
      extent = this.markerLayer.getSource().getExtent();
      this.map.getView().fit(extent, this.map.getSize());
      return;
    }

    if (pointCount >= 2 && !set_center_position && set_zoom_level) {
      extent = this.markerLayer.getSource().getExtent();
      this.map.getView().fit(extent, this.map.getSize());
      this.map.getView().setZoom(set_zoom_level);
      return;
    }

    if (set_zoom_level) {
      this.map.getView().setZoom(set_zoom_level);
      return;
    }

    if (!set_zoom_level) {
      this.map.getView().setZoom(default_zoom);
      return;
    }
  };

  return Openlayers_Map_Form;
})();
