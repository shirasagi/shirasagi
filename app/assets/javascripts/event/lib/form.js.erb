this.Event_Form = (function () {
  function Event_Form(el, options) {
    this.$el = $(el);
    this.options = options;

    this.render();
  }

  Event_Form.deleteMessage = <%= I18n.t('event.confirm.delete_date').to_json %>;

  Event_Form.prototype.render = function() {
    var self = this;

    self.$el.on("click", ".event-recurrence-add-btn", function() {
      self.addRecurrence(this);
    });
    self.$el.on("click", ".event-recurrence-delete-btn", function() {
      self.deleteRecurrence(this);
    });
    self.$el.on("click", ".event-recurrence-exclude-dates-btn", function() {
      self.openExcludeDates(this);
    });
    self.$el.on("change", ".event-recurrence-all-day-radio", function() {
      self.changeAllDay(this);
    });
    self.$el.on("ss:changeDateTime", ".event-recurrence-date-start-on", function() {
      self.setUntilOnIfUnset(this);
    });

    self.resetIndex();
    self.activeSynchronizer();
  };

  Event_Form.prototype.resetIndex = function() {
    var self = this;

    var index = 0;
    self.$el.find('[name="item[event_recurrences][][in_update_from_view]"]').each(function() {
      var $eventRecurrence = $(this).closest(".event-recurrence");
      $eventRecurrence.attr("data-index", index);
      $eventRecurrence.find(".event-recurrence-all-day-radio").attr("name", "all_day_" + index);

      index += 1;
    });
  };

  Event_Form.prototype.activeSynchronizer = function() {
    var self = this;

    self.$el.find(".event-recurrence-date").each(function() {
      if (this.ss && this.ss.synchronizer) {
        return;
      }

      var $this = $(this);

      var synchronizer = new SS_StartEndSynchronizer(
        $this.find(".event-recurrence-date-start-on"),
        $this.find(".event-recurrence-date-until-on"));

      if (!this.ss) {
        this.ss = {}
      }
      this.ss.synchronizer = synchronizer
    });
  };

  Event_Form.prototype.addRecurrence = function(buttonEl) {
    var self = this;
    var $button = $(buttonEl);

    var templateEl = document.getElementById($button.data("template"));
    var $template = $(templateEl);
    var $html = $($template.html());

    // $template.before($template.html());
    $button.closest(".event-recurrence").before($html);
    self.resetIndex();
    SS_DateTimePicker.render($html);
    self.activeSynchronizer();
  };

  Event_Form.prototype.deleteRecurrence = function(buttonEl) {
    var self = this;
    var $button = $(buttonEl);

    if (confirm(Event_Form.deleteMessage)) {
      $button.closest(".event-recurrence").remove();
      self.resetIndex();
    }
  };

  Event_Form.prototype.openExcludeDates = function(buttonEl) {
    var self = this;
    var $button = $(buttonEl);
    var $eventRecurrence = $button.closest(".event-recurrence");
    var index = $eventRecurrence.data("index");

    var $form = self.$el.closest("form");
    var data = new FormData($form[0]);
    data.delete("_method");
    data.append("index", index);

    $.ajax({
      method: "POST",
      url: $button.data("url"),
      data: data,
      contentType: false,
      processData: false,
      cache: false,
      success: function(data) {
        self.showExcludeDates(data, function(excludeDates) { self.commitExcludeDates($eventRecurrence, excludeDates) });
      },
      error: function(xhr, status, error) {
        self.showExcludeDatesError(xhr, status, error, $eventRecurrence);
      }
    });
  };

  Event_Form.prototype.showExcludeDates = function(html, commitCallback) {
    var self = this;

    $.colorbox({
      html: html, width: "90%", height: "90%", fixed: true, open: true,
      onComplete: function() {
        new Event_ExcludeDatesForm(self, document.querySelector(".event-recurrence-exclude-dates"), commitCallback);
      }
    });
  };

  Event_Form.prototype.showExcludeDatesError = function(xhr, _status, _error, $eventRecurrence) {
    var errorMessage;
    if (xhr.responseJSON) {
      errorMessage = xhr.responseJSON.join("\n");
    } else {
      errorMessage = "Error"
    }
    $eventRecurrence.find('.event-recurrence-excludes-summary').text(errorMessage).attr("title", "");
  };

  Event_Form.prototype.commitExcludeDates = function($eventRecurrence, excludeDates) {
    var serialized = excludeDates.join(",");
    $eventRecurrence.find('[name="item[event_recurrences][][in_exclude_dates]"]').val(serialized);
    $eventRecurrence.find('.event-recurrence-excludes-summary').text(serialized).attr("title", serialized);
  };

  Event_Form.prototype.changeAllDay = function(el) {
    var $el = $(el);
    $el.closest(".event-recurrence").find('[name="item[event_recurrences][][in_all_day]"]').val($el.val());
  }

  Event_Form.prototype.setUntilOnIfUnset = function(el) {
    var $el = $(el);
    var $untilOnEl = $el.closest(".event-recurrence-date").find(".event-recurrence-date-until-on");
    if ($untilOnEl.val()) {
      return;
    }

    var value = SS_DateTimePicker.momentValue(el);
    if (!value) {
      return;
    }

    SS_DateTimePicker.momentValue($untilOnEl, value);
  };

  Event_ExcludeDatesForm = function(container, el, commitCallback) {
    this.container = container;
    this.$el = $(el);
    this.commitCallback = commitCallback;
    this.render();
  };

  Event_ExcludeDatesForm.prototype.render = function() {
    var self = this;

    self.$el.on("click", ".toggle-btn", function() {
      if (this.getAttribute("aria-pressed") === "true") {
        this.setAttribute("aria-pressed", false);
      } else {
        this.setAttribute("aria-pressed", true);
      }
    });
    self.$el.on("click", ".event-recurrence-exlude-dates-commit-btn", function() {
      self.commit();
      $.colorbox.close();
    });
    self.$el.on("click", ".event-recurrence-exlude-dates-close-btn", function() {
      $.colorbox.close();
    });
  };

  Event_ExcludeDatesForm.prototype.commit = function() {
    var self = this;

    var excludedDates = [];
    self.$el.find('[aria-pressed="false"]').each(function() {
      excludedDates.push(this.dataset.date);
    });

    self.commitCallback(excludedDates);
  };

  return Event_Form;

})();
