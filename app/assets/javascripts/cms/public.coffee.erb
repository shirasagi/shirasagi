//= require jquery
//= require jquery_ujs
//= require js.cookie
//= require jquery.form
//= require jquery.datetimepicker
//= require_self
//= require ss/lib/module
//= require ss/lib/mobile
//= require cms/lib/editor
//= require ads/lib/banner
//= require event/lib/monthly
//= require event/lib/calendar
//= require inquiry/lib/form
//= require inquiry/lib/chart
//= require key_visual/lib/slide
//= require map/googlemaps/map
//= require map/googlemaps/facility/search
//= require map/googlemaps/member/photo/form
//= require map/openlayers/map
//= require map/openlayers/facility/search
//= require map/openlayers/member/photo/form
//= require jplayer/jquery.jplayer

$ ->
  SS_Kana.render()
  SS_Font.render()
  SS_AdobeReader.render()
  SS_Mobile.render()
  SS_Voice.render()
  SS_Theme.render()
  SS.renderAjaxBox()
  SS.part = $(".ss-part").length
  if SS.part == 0
    SS_Recommend.render()
  $(".ss-part").each ->
    SS.renderPart $(this)

  $.datetimepicker.setLocale('ja');
  if ($.support.opacity)
    $(".js-date").datetimepicker
      timepicker: false
      format:'Y/m/d'
      closeOnDateSelect: true
      scrollInput: false
    $(".js-datetime").datetimepicker
      roundTime: 'ceil'
      step: 30

class @SS
  @head = ""
  @page = ""
  @href = ""
  @siteName = null
  @pageName = null
  @loading  = '<img style="vertical-align:middle" src="/assets/img/loading.gif" alt="loading.." border="0" widtth="16" height="11" />'
  @parts = null

  @load: ->
    #deprecated

  @config = {}

  @renderLayout: (url) ->
    head = $("head")
    body = $("body")

    SS.head = head.html()
    SS.page = $("#page").html()

    body.html ""

    $.ajax {
      type: "GET", url: SS_Kana.url(url), dataType: "json", cache: true, async: false
      success: (data) ->
        #body.hide()
        body.append data.body.replace("</ yield />", SS.page)

        $("#ss-site-name").html SS.siteName
        $("#ss-page-name").html SS.pageName

        if data.href != SS.href
          cache = $.ajaxSettings.cache
          $.ajaxSettings.cache = true

          if SS.href
            head.children("link").remove()
            head.children("script").remove()
          head.append data.head #.replace(/\$now/g, $.now())
          $.ajaxSettings.cache = cache

        SS.href = data.href
        SS.renderTools()
        #body.fadeIn(200)
      error: (req, status, error) ->
        body.html SS.page
      complete: ->
        $(".ss-part").each ->
          SS.renderPart $(this)
    }

  @renderPart: (elem) ->
    url = elem.data("href") || elem.attr("href")
    url = SS_Kana.url url.replace(/\.html/, ".json")

    elem.append " " + SS.loading
    $.ajax
      type: "GET", url: url, dataType: "json" #, cache: false
      data: "ref=" + SS_Kana.url(location.pathname, false)
      success: (data) ->
        $(elem).replaceWith data
      error: ->
        $(elem).find("img").remove()
      complete: ->
        SS.part = SS.part - 1
        if SS.part == 0
          SS_Recommend.render()

  @ajaxForm:(elem, params = {}) ->
    elem = $(elem)
    defaults = {
      url: elem.attr("action") + ".json"
      dataType: "json"
      success: ->
        #
      error: (data, status) ->
        alert(["== Error =="].concat(data.responseJSON).join("\n"));
    }
    elem.on "submit", (e) ->
      $(this).ajaxSubmit $.extend(defaults, params)
      e.preventDefault();

  @renderAjaxBox:(params = {}) ->
    try
      $("#main .ajax-box").colorbox(params)
    catch e
      # console.warn(e)

  @ajax:(elem, params = {}) ->
    $(elem).click (e) ->
      self = $(this)
      defaults = {
        url: self.attr("href")
        beforeSend: ->
          self.html SS.loading
        success: ->
          console.log "success"
        error: (data, status) ->
          alert("== Error ==");
      }
      $.ajax $.extend(defaults, params)
      e.preventDefault();
      return false

  @ajaxDelete:(elem, params = {}) ->
    $(elem).click (e) ->
      return false if !confirm("<%= I18n.t "ss.confirm.delete" %>")
      self = $(this)
      defaults = {
        type: "DELETE",
        data: "_method=delete",
        url: self.attr("href") + ".json"
        dataType: "json"
        beforeSend: ->
          self.html SS.loading
        success: ->
          $(self.data("remove")).remove() if self.data("remove")
        error: (data, status) ->
          alert(["== Error =="].concat(data.responseJSON).join("\n"));
      }
      $.ajax $.extend(defaults, params)
      e.preventDefault();
      return false

class @SS_Kana
  @dir = "<%= SS.config.kana.location %>"

  @render: ->
    #bind = 'onclick="return SS_Kana.loadPage($(this))"'
    if $("body").data("kana")
      url = SS_Kana.url(location.pathname, false)
      bind = 'onclick="location.href=\'' + url + '\'; return false"'
      $("#ss-kana").html "<a class=\"off\" href=\"##{url}\" #{bind}><%= I18n.t 'cms.links.ruby_off' %></a>"
    else
      url = SS_Kana.url(location.pathname, true)
      bind = 'onclick="location.href=\'' + url + '\'; return false"'
      $("#ss-kana").html "<a class=\"on\" href=\"##{url}\" #{bind}><%= I18n.t "cms.links.ruby_on" %></a>"

  @url: (url, bool = null) ->
    bool = $("body").data("kana") if bool == null
    if bool
      url = @dir + url
    else
      url = url.replace(new RegExp("^" + @dir.replace("/", "\/") + "\/"), "/")
    return url

  @loadPage: (elem) ->
    $.ajax
      type: "GET", url: elem.attr("href"), dataType: "html" #, cache: false
      success: (data) ->
        body = $("body")
        body.data("kana", elem.hasClass("on"))
        body.html data.replace(/[\s\S]*<body.*?>([\s\S]*)<\/body>[\s\S]*/, "$1")
    return false

class @SS_Theme
  @render: ->
    return unless $("#ss-theme").length > 0

    theme = SS.config["theme"]
    $("#ss-theme").html("")

    css = ""
    for cls, v of theme
      a = $('<a href="#" class="' + cls + '">' + v["name"] + '</a>')

      if v["css_path"]
        $('head').append('<link rel="alternate stylesheet" type="text/css" title="' + v["name"] + '" href="' + v["css_path"] + '" class="ss-theme ' + cls + '" disabled />')

      if v["font_color"] && v["background_color"]
        css += SS_Theme.cssTemplate(cls, v["font_color"], v["background_color"]) + "\n"

      a.on "click", (e) ->
        cls = $(this).attr("class")
        Cookies.set("ss-theme", cls, { expires: 7, path: '/' })
        SS_Theme.switchTheme(cls)
        return false

      $("#ss-theme").append(a)

    style = $('<style type="text/css" class="ss-theme">' + css + '</style>')
    $("head").append(style)

    cls = Cookies.get("ss-theme")
    if cls
      SS_Theme.switchTheme(cls)

  @cssTemplate: (cls, color, backgroundColor) ->
    """
    body[data-ss-theme="#{cls}"] * {
      border-color: #{color} !important;
      background: #{backgroundColor} !important;
      color: #{color} !important;
    }
    """

  @switchTheme: (cls) ->
    $('head link.ss-theme').prop("disabled", true)
    $('head link.ss-theme.' + cls).prop("disabled", false)
    $("body").attr("data-ss-theme", "")
    $("body").attr("data-ss-theme", cls)

class @SS_Font
  @size = null # %

  @render: ->
    @size = parseInt(Cookies.get("ss-font")) || 100
    @set(@size) if @size != 100

    vr = $("#ss-medium")
    vr.html '<a href="#" onclick="return SS_Font.set(100)">' + vr.text() + '</a>'
    vr = $("#ss-small")
    vr.html '<a href="#" onclick="return SS_Font.set(false)">' + vr.text() + '</a>'
    vr = $("#ss-large")
    vr.html '<a href="#" onclick="return SS_Font.set(true)">' + vr.text() + '</a>'

  @set: (size) ->
    if size == true
      size = @size + 20
      return false if size > 200
    else if size == false
      size = @size - 20
      return false if size < 60

    @size = size
    $("body").css "font-size", size + "%"
    Cookies.set("ss-font", size, { expires: 7, path: '/' })
    return false

class @SS_AdobeReader
  @render: ->
    if $("a[href$='.pdf']").length
      $("#ss-adobe-reader, .ss-adobe-reader").each ->
        $(this).html('<%= I18n.t('cms.adobe_reader.remark').join %>').show()

class @SS_Tabs
  @render: (elem) ->
    box  = $(elem)
    tabs = ""

    box.find(".tab").each (i) ->
      tab  = $(this)
      name = tab.find('header > h2').html()
      nav  = tab.find('nav')
      url  = nav.find(".more").attr("href")
      alt_class = tab.attr('data-class')

      base_id = tab.attr("id")
      name_id = base_id + "-name"
      view_id = base_id + "-view"
      url = "##{view_id}" unless url

      tab_cls   = "name"
      tab_cls   = "name current" if i == 0
      tab_cls   = "#{tab_cls} #{alt_class}" if alt_class
      bind  = 'return SS_Tabs.select("' + elem + '", "#' + name_id + '", "#' + view_id + '")'
      tabs += "<a id='" + name_id + "' onclick='" + bind + "' class='" + tab_cls + "' href='" + url + "'>" + name + "</a>"

      disp = ""
      disp = "style='display: none;'" if i != 0

      body_css = 'view'
      body_css = "#{body_css} #{alt_class}" if alt_class
      html  = "<article id='" + view_id + "' class='" + body_css + "' " + disp + ">"
      html += "<h2 style='display: none'>" + name + "</h2>"
      html += "<div class='pages'>" + tab.find(".pages").html() + "</div>"
      html += "<nav>" + tab.find('nav').html() + "</nav>"
      html += "</article>"

      box.append html
      tab.remove()

    box.prepend "<nav class='names'>" + tabs + "</nav>"

  @select: (box, name, view) ->
    $(box).find(".name").each ->
      $(this).removeClass "current"
    $(box).find(".view").each ->
      $(this).hide()
    $(name).addClass "current"
    $(view).show()
    return false

class @SS_Voice
  @voice_config =
    'location': "<%= SS.config.voice.controller['location'] %>"
    'loading-resource': "<%= SS.config.voice.resource['loading'] %>"
    'disabled-resource': "<%= SS.config.voice.resource['disabled'] %>"
    'overload-resource': "<%= SS.config.voice.resource['overload'] %>"
  @url = null
  @voice_tag = null
  @voice_controller = null
  @state = null
  @cancel_loading = null
  @timer_id = null

  @render: ->
    SS_Voice.url = SS_Voice.requestUrl()

    voice_tag = $('#ss-voice')
    return if voice_tag.size() == 0
    voice_tag = voice_tag.first() if voice_tag.size() > 1

    anchor = $('<a rel="nofollow"/>').attr('href', SS_Voice.url).html(voice_tag.html())
    voice_tag.html('')
    anchor.appendTo(voice_tag)
    SS_Voice.voice_tag = anchor

    voice_controller = $('#ss-voice-controller')
    if voice_controller.size() == 0
      # no controller tag found, create default audio controller tag
      voice_tag.after('<div id="ss-voice-controller" style="display: none;"/>')
      voice_controller = $('#ss-voice-controller')

    SS_Voice.voice_controller = new SS_VoiceController(voice_controller[0])
    SS_Voice.state = null
    SS_Voice.cancel_loading = false
    SS_Voice.timer_id = null
    SS_Voice.init()

    voice_controller.find('.ss-jp-close').bind('click', SS_Voice.cancel)

  @init: ->
    SS_Voice.state = 'init'
    SS_Voice.voice_controller.stop()
    SS_Voice.setAction(SS_Voice.load)
    SS_Voice.cancel_loading = false
    return false

  @setAction: (action) ->
    SS_Voice.voice_tag.unbind('click')
    SS_Voice.voice_tag.bind('click', action)

  @load: ->
    return false if SS_Voice.cancel_loading
    $.ajax {
      type: 'HEAD', url: SS_Voice.url, cache: false
      statusCode: {
        200: =>
          SS_Voice.playAudio()
        202: (data, status, xhr) =>
          SS_Voice.renderLoading()
          retry_after = xhr.getResponseHeader('Retry-After')
          retry_after = 5 unless retry_after
          SS_Voice.timer_id = setTimeout(SS_Voice.load, retry_after * 1000)
      }
      error: (xhr, status, error) ->
        SS_Voice.renderError(xhr.status)
    }
    return false

  @renderLoading: ->
    return false if SS_Voice.state == 'loading'
    url = SS_Voice.voice_config['loading-resource']
    SS_Voice.state = 'loading'
    SS_Voice.setAction(SS_Voice.cancel)
    SS_Voice.voice_controller.play(url)
    return false

  @renderError: (status) ->
    return false if SS_Voice.state == 'error'
    clearTimeout(SS_Voice.timer_id) if SS_Voice.timer_id >= 0
    SS_Voice.timer_id = -1
    if status == 429
      # too many requests
      url = SS_Voice.voice_config['overload-resource']
    else
      # other error
      url = SS_Voice.voice_config['disabled-resource']
    SS_Voice.state = 'error'
    SS_Voice.setAction(SS_Voice.cancel)
    SS_Voice.voice_controller.play(url)
    return false

  @cancel: ->
    SS_Voice.cancel_loading = true
    clearTimeout(SS_Voice.timer_id) unless SS_Voice.timer_id == null
    SS_Voice.timer_id = null
    # back to beginning
    SS_Voice.init()
    return false

  @playAudio: ->
    SS_Voice.state = 'playing'
    SS_Voice.voice_controller.play(SS_Voice.url)
    SS_Voice.setAction(SS_Voice.cancel)
    return false

  @requestUrl: ->
    path = SS_Voice.trimKanaDir(location.pathname)
    path = "/index.html" if path == "/"
    url = encodeURIComponent(SS_Voice.normalizeProtocol(location.protocol) + '://' + location.host + path)
    url = SS_Voice.normalizeLocation(SS_Voice.voice_config['location']) + '/' + url
    return url

  @trimKanaDir: (path, kana_dir = SS_Kana.dir) ->
    return path.replace(new RegExp('^' + kana_dir.replace('/', '\/') + '\/'), '/')

  @normalizeProtocol: (protocol) ->
    return protocol.replace(new RegExp(':$'), '')

  @normalizeLocation: (location) ->
    return location.replace(new RegExp('/$'), '')

class @SS_VoiceController
  constructor: (container) ->
    @status = 'stopped'
    @container = $(container)
    @initialized = false
    @container.html(@template())
    @player = @container.children('.jp-jplayer')
    @controller = @container.children('.jp-audio')

  play: (source) ->
    @stop()
    @status = 'playing'
    # IE8 requires that element must be visible to manipulate DOM and its events properly
    @container.show()
    if @initialized
      @player.jPlayer("setMedia", {
        title: document.title
        mp3: source
      })
      @player.jPlayer("play")
    else
      @player.jPlayer({
        ready: =>
          @player.jPlayer("setMedia", {
            title: document.title
            mp3: source
          })
          @player.jPlayer("play") if @status == 'playing'
          @initialized = true
        autoBlur: false
        cssSelectorAncestor: "##{@controller[0].id}"
        keyEnabled: false
        loop: true
        remainingDuration: true
        smoothPlayBar: true
        supplied: "mp3"
        swfPath: "<%= SS.config.voice.resource['jplayer_path'] %>"
        toggleDuration: true
        useStateClassSkin: true
      })

  stop: ->
    return unless @initialized
    return if @status == 'stopped'
    @player.jPlayer("stop")
    @container.hide()
    @status = 'stopped'

  template: ->
    """
    <div id="jquery_jplayer_#{(new Date).getTime()}" class="jp-jplayer"></div>
    <div id="jp_container_#{(new Date).getTime()}" class="jp-audio" role="application" aria-label="media player">
      <div class="jp-type-single">
        <div class="jp-gui jp-interface">
          <div class="jp-controls">
            <button class="jp-play" role="button" tabindex="0">play</button>
            <button class="jp-stop" role="button" tabindex="0">stop</button>
          </div>
          <div class="jp-progress">
            <div class="jp-seek-bar">
              <div class="jp-play-bar"></div>
            </div>
          </div>
          <div class="jp-volume-controls">
            <button class="jp-mute" role="button" tabindex="0">mute</button>
            <button class="jp-volume-max" role="button" tabindex="0">max volume</button>
            <div class="jp-volume-bar">
              <div class="jp-volume-bar-value"></div>
            </div>
          </div>
          <div class="jp-time-holder">
            <div class="jp-current-time" role="timer" aria-label="time">&nbsp;</div>
            <div class="jp-toggles">
              <button class="jp-repeat" role="button" tabindex="0">repeat</button>
            </div>
          </div>
          <div class="ss-jp-dismiss">
            <button class="ss-jp-close" role="button" tabindex="0">&times;</button>
          </div>
        </div>
        <div class="jp-no-solution">
          <%= I18n.t 'voice.messages.no_audio_solution' %>
        </div>
      </div>
    </div>
    """

class @SS_Recommend
  @render: ->
    recommend = SS.config["recommend"]
    return unless recommend
    receiver_url = recommend["receiver_url"]
    params = recommend["params"]
    return unless (receiver_url && params)
    params["access_url"] = location.href
    $.ajax {
      type: 'GET', url: receiver_url, cache: false, dataType: 'json',
      data: params,
      error: (req, status, error) ->
        #
    }
