this.Link_Checker = (function () {
  function ResultBox(form) {
    this.$el = null;
    this.$elBody = null;
    this.form = form;
  }

  ResultBox.prototype.init = function() {
    if (this.$el) {
      return this;
    }

    var $div = $("#errorLinkChecker");
    if ($div[0]) {
      this.$el = $div;
      this.$elBody = $div.find(".errorExplanationBody");

      return this.moveLast();
    }

    $div = $("<div/>", { id: 'errorLinkChecker', class: 'errorExplanation' });
    $div.append("<h2>" + Link_Checker.message["header"] + "</h2>");

    var $body = $("<div/>", { class: 'errorExplanationBody' });
    $div.append($body);

    this.$el = $div;
    this.$elBody = $body;

    return this.moveLast();
  };

  ResultBox.prototype.moveLast = function() {
    $(this.form.addonSelector).append(this.$el);
    return this;
  };

  ResultBox.prototype.showMessage = function(message) {
    this.init();
    this.$elBody.html(message);
    this.moveLast();

    return this;
  }

  ResultBox.prototype.showChecking = function() {
    return this.showMessage(SS.loading);
  };

  ResultBox.prototype.showResult = function (links) {
    var $ul = $("<ul/>");
    $.each(links, function(link, msg) {
      $ul.append('<li>' + msg + '</li>');
    });

    this.$elBody.html("");
    this.$elBody.append("<p>" + Link_Checker.message["checkLinks"] + "</p>");
    this.$elBody.append($ul);

    return this.moveLast();
  };

  function Link_Checker(el, form) {
    this.$el = $(el);
    this.form = form;
    this.links = {};
    this.linkErrorCount = 0;
    this.resultBox = new ResultBox(form);
  }

  Link_Checker.message = {
    header: "<%= I18n.t('cms.link_check') %>",
    noLinks: "<%= I18n.t('errors.template.no_links') %>",
    checkLinks: "<%= I18n.t('errors.template.check_links') %>",
    success: "<%= I18n.t('errors.messages.link_check_success') %>",
    failure: "<%= I18n.t('errors.messages.link_check_failure') %>",
    linkCheckerError: "<%= I18n.t('errors.messages.link_check_failed_to_connect') %>"
  };

  Link_Checker.url = "/.cms/link_check/check.json";

  Link_Checker.rootUrl = "";

  Link_Checker.instance = null;

  Link_Checker.render = function (form) {
    form = form || Cms_Form;

    var instance = Link_Checker.instance = new Link_Checker(document, form);
    instance.render();
    return instance;
  };

  Link_Checker.reset = function () {
    if (! Link_Checker.instance) {
      return;
    }

    Link_Checker.instance.reset();
  };

  Link_Checker.prototype.render = function () {
    var self = this;
    return this.$el.on("click", "button.link-check", function () {
      var button = this;
      button.disabled = true;

      var complete = function() {
        button.disabled = false;
      };

      self.asyncCheck().done(complete).fail(complete);
    });
  };

  Link_Checker.prototype.asyncCheck = function () {
    if (this.form.addonSelector === ".mod-cms-body") {
      return this.asyncCheckInEditor();
    } else {
      return this.asyncCheckInForm();
    }
  };

  Link_Checker.prototype.asyncCheckInEditor = function () {
    var self = this;
    var defer = $.Deferred();

    this.beforeCheck();

    var $html = $(this.form.getEditorHtml());

    var links = [];
    $html.find('a[href]').each(function() {
      var link = $(this).attr('href');
      if (link === "#") {
        return;
      }

      if (link[0] === "#") {
        self.addMessage(link, $html.find(link).length !== 0);
      } else {
        if (/^\//.test(link)) {
          link = Link_Checker.rootUrl + link.slice(1);
        }
        links.push(link);
      }
    });

    if (links.length === 0) {
      if ($.isEmptyObject(this.links)) {
        this.resultBox.showMessage("<p>" + Link_Checker.message["noLinks"] + "</p>");
      } else {
        this.resultBox.showResult(this.links);
      }

      defer.resolve({ status: (this.linkErrorCount === 0 ? "ok" : "failed") });
      return defer.promise();
    }

    $.ajax({
      type: "POST",
      url: Link_Checker.url,
      cache: false,
      data: JSON.stringify({
        "url": links
      }),
      contentType: 'application/json',
      dataType: "json",
      crossDomain: true,
      success: function (res, status) {
        $.each(res, function(link, code) {
          self.addMessage(link, code === 200);
        });

        self.resultBox.showResult(self.links);
        defer.resolve({ status: (self.linkErrorCount === 0 ? "ok" : "failed") });
      },
      error: function (xhr, status, error) {
        var msg = Link_Checker.message["linkCheckerError"] + ": " + Link_Checker.url;
        self.resultBox.showMessage("<p>" + msg + "</p>");
        defer.reject(xhr, status, error);
      }
    });

    return defer.promise();
  };

  Link_Checker.prototype.asyncCheckInForm = function () {
    var self = this;
    var defer = $.Deferred();

    this.beforeCheck();

    if (! this.form.form_link_check_path) {
      var msg = "form link check path is not configured";

      this.resultBox.showMessage("<p>" + msg + "</p>");
      defer.reject(null, null, msg);
      return;
    }

    var formData = this.form.getFormData($("#" + Form_Preview.form_id));
    formData.append("route", Form_Preview.page_route);

    $.ajax({
      type: "POST",
      url: self.form.form_link_check_path,
      data: formData,
      processData: false,
      contentType: false,
      cache: false,
      success: function(data) {
        if (!data || data.length === 0) {
          self.resultBox.showMessage("<p>" + Link_Checker.message["noLinks"] + "</p>");
          defer.resolve({ status: "ok" });
          return;
        }

        result = "ok";

        $.each(data, function() {
          var link = this[0];
          var status = this[1];

          var msg = '<span class="' + status + '">' + Link_Checker.message[status] + '</span>';
          self.addMessage(link, null, msg);

          if (status === "failure") {
            result = "failed";
          }
        })

        self.resultBox.showResult(self.links);
        defer.resolve({ status: result });
      },
      error: function(xhr, status, error) {
        var msg = Link_Checker.message["linkCheckerError"] + ": " + self.form.form_link_check_path;
        self.resultBox.showMessage("<p>" + msg + "</p>");
        defer.reject(xhr, status, error);
      }
    });

    return defer.promise();
  };

  Link_Checker.prototype.reset = function () {
    this.links = {};
    this.linkErrorCount = 0;
  };

  Link_Checker.prototype.beforeCheck = function () {
    this.reset();

    $.support.cors = true;
    this.resultBox.showChecking();
  };

  Link_Checker.prototype.addMessage = function (link, state, msg) {
    if (! msg) {
      if (state) {
        msg = '<span class="success">' + Link_Checker.message["success"] + '</span>';
      } else {
        msg = '<span class="failure">' + Link_Checker.message["failure"] + '</span>';
        this.linkErrorCount++;
      }
    }
    this.links[link] = link + " " + msg;
  };

  return Link_Checker;

})();
