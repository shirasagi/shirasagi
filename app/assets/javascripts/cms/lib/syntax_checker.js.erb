this.Syntax_Checker = (function () {
  function ResultBox() {
    this.$el = null;
    this.$elBody = null;
    this.form = null;
  }

  ResultBox.prototype.init = function() {
    if (this.$el) {
      return this;
    }

    var $div = $("#errorSyntaxChecker");
    if ($div[0]) {
      this.$el = $div;
      this.$elBody = $div.find(".errorExplanationBody");

      return this.moveLast();
    }

    $div = $("<div/>", { id: 'errorSyntaxChecker', class: 'errorExplanation' });
    $div.append("<h2>" + "<%= I18n.t('cms.syntax_check') %>" + "</h2>");

    var $body = $("<div/>", { class: 'errorExplanationBody' });
    $div.append($body);

    this.$el = $div;
    this.$elBody = $body;

    return this.moveLast();
  };

  ResultBox.prototype.moveLast = function() {
    $(this.form.addonSelector).append(this.$el);
    return this;
  };

  ResultBox.prototype.showMessage = function(message) {
    this.init();
    this.$elBody.html(message);
    this.moveLast();

    return this;
  }

  ResultBox.prototype.showChecking = function() {
    return this.showMessage(SS.loading);
  };

  ResultBox.prototype.showResult = function () {
    if (Syntax_Checker.errorCount === 0) {
      return this.showMessage("<p>" + "<%= I18n.t('errors.template.no_errors') %>" + "</p>");
    }

    this.init();

    var ul = $("<ul/>");
    Syntax_Checker.appendMessage(ul, Syntax_Checker.errors);

    this.$elBody.html("")
    this.$elBody.append("<p>" + "<%= I18n.t('errors.template.body') %>" + "</p>");
    this.$elBody.append(ul);

    this.moveLast();
    SS_Tooltips.render(".detail");

    $(window).trigger('resize');

    return this;
  };

  function Syntax_Checker() {
  }

  Syntax_Checker.message = {
    notSetImgAlt: "<%= I18n.t('errors.messages.set_img_alt') %>",
    notSetAppletAlt: "<%= I18n.t('errors.messages.set_applet_alt') %>",
    notSetAreaAlt: "<%= I18n.t('errors.messages.set_area_alt') %>",
    invalidImgScheme: "<%= I18n.t('errors.messages.invalid_img_scheme') %>",
    notSetTableCaption: "<%= I18n.t('errors.messages.set_table_caption') %>",
    notSetThScope: "<%= I18n.t('errors.messages.set_th_scope') %>",
    invalidOrderOfH: "<%= I18n.t('errors.messages.invalid_order_of_h') %>",
    invalidMultibyteCharacter: "<%= I18n.t('errors.messages.invalid_multibyte_character') %>",
    invalidKanaCharacter: "<%= I18n.t('errors.messages.invalid_kana_character') %>",
    invalidDateFormat: "<%= I18n.t('errors.messages.invalid_date_format') %>",
    invalidAdjacentA: "<%= I18n.t('errors.messages.invalid_adjacent_a') %>",
    checkInterwordSpace: "<%= I18n.t('errors.messages.check_interword_space') %>",
    checkLinkText: "<%= I18n.t('errors.messages.check_link_text') %>",
    checkObjectText: "<%= I18n.t('errors.messages.check_object_text') %>",
    checkEmbeddedMedia: "<%= I18n.t('errors.messages.check_embedded_media') %>",
    replaceWord: "<%= I18n.t('errors.messages.replace_word') %>"
  };

  Syntax_Checker.detail = {
    notSetImgAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_img_alt').to_json %>,
    notSetAppletAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_applet_alt').to_json %>,
    notSetAreaAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_area_alt').to_json %>,
    invalidImgScheme: <%= I18n.t('errors.messages.syntax_check_detail.invalid_img_scheme').to_json %>,
    notSetTableCaption: <%= I18n.t('errors.messages.syntax_check_detail.set_table_caption').to_json %>,
    notSetThScope: <%= I18n.t('errors.messages.syntax_check_detail.set_th_scope').to_json %>,
    invalidOrderOfH: <%= I18n.t('errors.messages.syntax_check_detail.invalid_order_of_h').to_json %>,
    invalidMultibyteCharacter: <%= I18n.t('errors.messages.syntax_check_detail.invalid_multibyte_character').to_json %>,
    invalidKanaCharacter: <%= I18n.t('errors.messages.syntax_check_detail.invalid_kana_character').to_json %>,
    invalidDateFormat: <%= I18n.t('errors.messages.syntax_check_detail.invalid_date_format').to_json %>,
    invalidAdjacentA: <%= I18n.t('errors.messages.syntax_check_detail.invalid_adjacent_a').to_json %>,
    checkInterwordSpace: <%= I18n.t('errors.messages.syntax_check_detail.check_interword_space').to_json %>,
    checkLinkText: <%= I18n.t('errors.messages.syntax_check_detail.check_link_text').to_json %>,
    checkObjectText: <%= I18n.t('errors.messages.syntax_check_detail.check_object_text').to_json %>,
    checkEmbeddedMedia: <%= I18n.t('errors.messages.syntax_check_detail.check_embedded_media').to_json %>
  };

  Syntax_Checker.mediaExtensions = ["aac", "aif", "aiff", "au", "avi", "flac", "flv", "mid", "midi", "mp3", "m4a", "mp4", "mpg", "mpeg", "oga", "ogg", "tta", "vdo", "wav", "wma", "wmv"];

  Syntax_Checker.errors;

  Syntax_Checker.errorCount;

  Syntax_Checker.autoCorrect = false;

  Syntax_Checker.config = {};

  Syntax_Checker.enabled = true;

  Syntax_Checker.resultBox = new ResultBox();

  Syntax_Checker.reset = function () {
    this.errors = {};
    this.errorCount = 0;
  };

  Syntax_Checker.render = function (form) {
    form = form || Cms_Form;
    Syntax_Checker.resultBox.form = form;

    $(document).on("click", "button.syntax-check", function () {
      var button = this;
      button.disabled = true;

      var complete = function() {
        button.disabled = false;
      };

      Syntax_Checker.asyncCheck().done(complete).fail(complete);
    });
  };

  Syntax_Checker.asyncCheck = function () {
    var defer = $.Deferred();

    var resolved = function(content, type) {
      type = type || "html";
      try {
        Syntax_Checker.check(content, type);
        defer.resolve({ status: Syntax_Checker.errorCount === 0 ? "ok" : "failed" });
      } catch (e) {
        Syntax_Checker.resultBox.showMessage("<p>" + e + "</p>");
        defer.reject(null, null, error);
      }
    };

    var rejected = function(xhr, status, error) {
      Syntax_Checker.resultBox.showMessage("<p>" + error + "</p>");
      defer.reject(xhr, status, error);
    };

    Syntax_Checker.resultBox.showChecking();
    Syntax_Checker.resultBox.form.getHtml(resolved, rejected);

    return defer.promise();
  };

  Syntax_Checker.check = function (content, type) {
    Syntax_Checker.reset();

    if (content) {
      if (type == "html") {
        Syntax_Checker.checkHtml(content);
      } else if (type == "text") {
        Syntax_Checker.checkText(content);
      } else if (type == "textlist") {
        Syntax_Checker.checkTextList(content);
      } else {
        Syntax_Checker.checkHtml(content);
      }
    }

    Syntax_Checker.resultBox.showResult();
  };

  Syntax_Checker.checkHtml =  function (html) {
    Syntax_Checker.checkTable(html);
    Syntax_Checker.checkMultibyteCharacter(html);
    Syntax_Checker.checkKanaCharacter(html);
    Syntax_Checker.checkDateFormat(html);
    Syntax_Checker.checkAdjacentA(html);
    Syntax_Checker.checkOrderOfH(html);
    Syntax_Checker.checkImgAlt(html);
    Syntax_Checker.checkAppletAlt(html);
    Syntax_Checker.checkAreaAlt(html);
    Syntax_Checker.checkImgDataUriScheme(html);
    Syntax_Checker.checkInterwordSpace(html);
    Syntax_Checker.checkLinkText(html);
    Syntax_Checker.checkObjectText(html);
    Syntax_Checker.checkEmbeddedMedia(html);
    Syntax_Checker.checkReplaceWords(html);
  }

  Syntax_Checker.checkText =  function (text) {
    var html = "<div>" + text + "</div>";

    Syntax_Checker.checkMultibyteCharacter(html);
    Syntax_Checker.checkKanaCharacter(html);
    Syntax_Checker.checkDateFormat(html);
    Syntax_Checker.checkReplaceWords(html);
  }

  Syntax_Checker.checkTextList =  function (content) {
    for (key in content) {
      var html = "<div>" + content[key] + "</div>";

      Syntax_Checker.checkMultibyteCharacter(html, { listkey: key });
      Syntax_Checker.checkKanaCharacter(html, { listkey: key });
      Syntax_Checker.checkDateFormat(html, { listkey: key });
      Syntax_Checker.checkReplaceWords(html, { listkey: key });
    }
  }

  Syntax_Checker.validateHtml = function (form, submit, opts) {
    if (! Syntax_Checker.enabled) {
      return;
    }

    // create deep copy of html
    var html = (' ' + opts.html).slice(1);
    if (Syntax_Checker.check(html, "html")) {
      return;
    }

    var error, errors, i, key, ref, results;
    ref = Syntax_Checker.errors;
    results = [];
    for (key in ref) {
      errors = ref[key];
      results.push((function () {
        var j, len, results1;
        results1 = [];
        for (i = j = 0, len = errors.length; j < len; i = ++j) {
          error = errors[i];
          if (error["correct"] && Syntax_Checker.autoCorrect) {
            results1.push(Syntax_Checker.resultBox.form.alert.add("<%= I18n.t('cms.auto_correct.notice') %>", this, error["msg"]));
          } else {
            results1.push(Syntax_Checker.resultBox.form.alert.add("<%= I18n.t('cms.syntax_check') %>", this, error["msg"]));
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Syntax_Checker.validateText = function (form, submit, opts) {
    if (! Syntax_Checker.enabled) {
      return;
    }

    // create deep copy of html
    var html = (' ' + opts.html).slice(1);
    if (Syntax_Checker.check(html, "text")) {
      return;
    }

    var error, errors, i, key, ref, results;
    ref = Syntax_Checker.errors;
    results = [];
    for (key in ref) {
      errors = ref[key];
      results.push((function () {
        var j, len, results1;
        results1 = [];
        for (i = j = 0, len = errors.length; j < len; i = ++j) {
          error = errors[i];
          if (error["correct"] && Syntax_Checker.autoCorrect) {
            results1.push(Syntax_Checker.resultBox.form.alert.add("<%= I18n.t('cms.auto_correct.notice') %>", this, error["msg"]));
          } else {
            results1.push(Syntax_Checker.resultBox.form.alert.add("<%= I18n.t('cms.syntax_check') %>", this, error["msg"]));
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Syntax_Checker.correctAll = function (form, submit, opts) {
    // create deep copy of html
    var html = (' ' + opts.html).slice(1);
    html = Syntax_Checker.correctMultibyteCharacter(html);
    html = Syntax_Checker.correctKanaCharacter("<div>" + html + "</div>");
    html = Syntax_Checker.correctDateFormat("<div>" + html + "</div>");
    if ($("<div>" + html + "</div>").find("table").length) {
      html = Syntax_Checker.correctTableCaption($("<div>" + html + "</div>").find("table"));
      html = Syntax_Checker.correctTableScope($("<div>" + html + "</div>").find("table"));
    }
    if ($("<div>" + html + "</div>").find("h1,h2,h3,h4,h5,h6").length) {
      html = Syntax_Checker.correctOrderOfH("<div>" + html + "</div>");
    }
    if ($("<div>" + html + "</div>").find("a[href]").length) {
      html = Syntax_Checker.correctAdjacentA($("<div>" + html + "</div>").find("a[href]"));
    }
    return Syntax_Checker.resultBox.form.setEditorHtml(html);
  };

  Syntax_Checker.pushError = function (errors) {
    var key;
    key = Syntax_Checker.errorCount;
    Syntax_Checker.errors[key] = errors;
    Syntax_Checker.errorCount += 1;
    return key;
  };

  Syntax_Checker.isValidDate = function (date) {
    if (Object.prototype.toString.call(date) !== "[object Date]") {
      return false;
    }
    if (!isNaN(date.getTime()) && date.getYear() > 0) {
      return true;
    } else {
      return false;
    }
  };

  Syntax_Checker.justText = function (ele) {
    return $(ele).clone().children().remove().end().text();
  };

  Syntax_Checker.outerHtmlSummary = function (ele) {
    return $(ele).get(0).outerHTML.replace(/[\r\n]|&nbsp;/g, "");
  };

  Syntax_Checker.appendMessage = function (ul, errorHash) {
    var correct, detail, error, errors, i, key, li, message, results, listkey;

    results = [];
    for (key in errorHash) {
      errors = errorHash[key];
      ul.append('<li class="code">');
      ul.find('li:last').append('<code>');
      ul.append('<ul>');
      results.push((function () {
        var j, len, results1;
        results1 = [];
        for (i = j = 0, len = errors.length; j < len; i = ++j) {
          error = errors[i];
          ul.find('li:last code').text(error["code"]);
          ul.find('> ul:last').append('<li>');
          li = ul.find('> ul:last li:last');
          message = $('<span class="message detail">' + error["msg"] + '</span>');
          if (error["detail"]) {
            detail = $('<ul>').appendTo(message);
            $.each(error["detail"], function () {
              detail.append("<li>" + this + "</li>");
              return detail.hide();
            });
          }
          li.append(message);
          if (error["correct"] && error["ele"]) {
            correct = $('<a href="#" class="correct">' + "<%= I18n.t('cms.auto_correct.link') %>" + '</a>');
            correct.on("click", {
              error: error
            }, function (e) {
              var html;
              if (e.data.error["opts"]) {
                html = e.data.error["correct"](e.data.error["ele"], e.data.error["opts"]);
              } else {
                html = e.data.error["correct"](e.data.error["ele"]);
              }
              Syntax_Checker.resultBox.form.setEditorHtml(html, { "listkey": e.data.error["listkey"] });
              $(Syntax_Checker.resultBox.form.addonSelector).find("button.syntax-check").trigger("click");
              return false;
            });
            results1.push(li.append(correct));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  Syntax_Checker.checkImgAlt = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find('img').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetImgAlt"],
            detail: Syntax_Checker.detail["notSetImgAlt"],
            ele: this,
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkAppletAlt = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find('applet').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetAppletAlt"],
            detail: Syntax_Checker.detail["notSetAppletAlt"],
            ele: this,
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkAreaAlt = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find('area').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetAreaAlt"],
            detail: Syntax_Checker.detail["notSetAreaAlt"],
            ele: this,
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkImgDataUriScheme = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find('img[src]').each(function () {
      var errors, src;
      src = $(this).attr('src');
      if (/^data:.*?,.*?$/.test(src)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["invalidImgScheme"],
            detail: Syntax_Checker.detail["invalidImgScheme"],
            ele: this,
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkTable = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find("table").each(function () {
      var caption, errors, table;
      table = this;
      caption = $(this).find('caption');
      errors = [];
      if (!caption || $.trim(caption.text()) === "") {
        errors.push({
          code: Syntax_Checker.outerHtmlSummary(table),
          msg: Syntax_Checker.message["notSetTableCaption"],
          detail: Syntax_Checker.detail["notSetTableCaption"],
          ele: table,
          correct: Syntax_Checker.correctTableCaption,
          listkey: listkey
        });
      }
      $(table).find('th').each(function () {
        if (!$(this).attr("scope")) {
          errors.push({
            code: Syntax_Checker.outerHtmlSummary(table),
            msg: Syntax_Checker.message["notSetThScope"],
            detail: Syntax_Checker.detail["notSetThScope"],
            ele: table,
            correct: Syntax_Checker.correctTableScope,
            listkey: listkey
          });
          return false;
        }
      });
      if (!$.isEmptyObject(errors)) {
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.correctTableCaption = function (table) {
    $(table).find('caption').remove();
    $(table).prepend('<caption>' + "<%= I18n.t('cms.auto_correct.caption') %>" + '</caption>');
    return $(table).parents().last().html() || $(table).html();
  };

  Syntax_Checker.correctTableScope = function (table) {
    var scope;
    if ($(table).find("tr:first th").length === 1) {
      scope = "row";
    } else {
      scope = "col";
    }
    $(table).find("tr:first th").each(function () {
      if (!$(this).attr("scope")) {
        return $(this).attr("scope", scope);
      }
    });
    $(table).find("tr:not(:first) th").each(function () {
      if (!$(this).attr("scope")) {
        return $(this).attr("scope", "row");
      }
    });
    return $(table).parents().last().html() || $(table).html();
  };

  Syntax_Checker.checkOrderOfH = function (html, opts) {
    var code, errors, h, i, j, ref, listkey;

    opts = opts || {};
    listkey = opts["listkey"];


    h = $(html).find("h1,h2,h3,h4,h5,h6");
    if (!h.length) {
      return;
    }
    code = "";
    for (i = j = 0, ref = h.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (i === 0) {
        if (!/h[12]/i.test(h[i].tagName)) {
          code += h[i].tagName + " ";
        }
      } else {
        if (/h3/i.test(h[i].tagName)) {
          if (!/h[23456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h4/i.test(h[i].tagName)) {
          if (!/h[3456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h5/i.test(h[i].tagName)) {
          if (!/h[456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h6/i.test(h[i].tagName)) {
          if (!/h[56]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        }
      }
    }
    if (code !== "") {
      errors = [
        {
          code: code,
          msg: Syntax_Checker.message["invalidOrderOfH"],
          ele: html,
          detail: Syntax_Checker.detail["invalidOrderOfH"],
          correct: Syntax_Checker.correctOrderOfH,
          listkey: listkey
        }
      ];
      Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctOrderOfH = function (html) {
    var h, i, j, ref, replace;
    h = $(html).find("h1,h2,h3,h4,h5,h6");
    if (!h.length) {
      return $(html).parents().last().html();
    }
    replace = html;
    for (i = j = 0, ref = h.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (i === 0) {
        if (!/h[12]/i.test(h[i].tagName)) {
          replace = $('<h1>' + $(h[i]).html() + '</h1>');
          $(h[i]).after(replace).remove();
          h[i] = replace[0];
        }
      } else {
        if (/h3/i.test(h[i].tagName)) {
          if (!/h[23456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h4/i.test(h[i].tagName)) {
          if (!/h[3456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h5/i.test(h[i].tagName)) {
          if (!/h[456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h6/i.test(h[i].tagName)) {
          if (!/h[56]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        }
      }
    }
    return $(replace).parents().last().html() || $(replace).html();
  };

  Syntax_Checker.checkMultibyteCharacter = function (html, opts) {
    var chars, errors, listkey;
    chars = [];

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var c;
      c = this.textContent.match(/[Ａ-Ｚａ-ｚ０-９]/g);
      if (c) {
        return chars.push(c);
      }
    });
    if (!$.isEmptyObject(chars)) {
      errors = [
        {
          code: chars.join(","),
          msg: Syntax_Checker.message["invalidMultibyteCharacter"],
          detail: Syntax_Checker.detail["invalidMultibyteCharacter"],
          ele: html,
          correct: Syntax_Checker.correctMultibyteCharacter,
          listkey: listkey
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctMultibyteCharacter = function (html) {
    var ret;
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (c) {
        return String.fromCharCode(c.charCodeAt(0) - 0xFEE0);
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkKanaCharacter = function (html, opts) {
    var c, errors, listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    c = html.match(/[｡-ﾟ]/g);
    if (!$.isEmptyObject(c)) {
      errors = [
        {
          code: c.join(","),
          msg: Syntax_Checker.message["invalidKanaCharacter"],
          detail: Syntax_Checker.detail["invalidKanaCharacter"],
          ele: html,
          correct: Syntax_Checker.correctKanaCharacter,
          listkey: listkey
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.checkReplaceWords = function (html, opts) {
    var c, errors, k, results, v, words, listkey;
    words = Syntax_Checker.config["replace_words"];

    opts = opts || {};
    listkey = opts["listkey"];

    if (!words) {
      return;
    }
    results = [];
    for (k in words) {
      v = words[k];
      c = html.match(RegExp("" + k.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1'), "g"));
      if (!$.isEmptyObject(c)) {
        errors = [
          {
            code: c[0],
            msg: Syntax_Checker.message["replaceWord"] + ("「" + k + "」→「" + v + "」"),
            ele: html,
            correct: Syntax_Checker.correctReplaceWords,
            listkey: listkey,
            opts: {
              key: k,
              value: v
            }
          }
        ];
        results.push(Syntax_Checker.pushError(errors));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Syntax_Checker.correctReplaceWords = function (html, opts) {
    var key, ret, value;
    if (opts == null) {
      opts = {};
    }
    key = opts["key"];
    value = opts["value"];
    if (!(key || value)) {
      return;
    }
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(RegExp("" + key.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1'), "g"), function (c) {
        return value;
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.correctKanaCharacter = function (html) {
    var full, half, i, j, kanaMap, len, ret, v;
    half = "｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ".split("");
    full = "。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜".split("");
    kanaMap = {};
    for (i = j = 0, len = half.length; j < len; i = ++j) {
      v = half[i];
      kanaMap[v] = full[i];
    }
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/[｡-ﾟ]/g, function (c) {
        return kanaMap[c];
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkDateFormat = function (html, opts) {
    var dates, errors, listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    dates = [];
    $(html).find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var d;
      d = this.textContent.match(/\d{4}[\.\-\/]\d{1,2}[\.\-\/]\d{1,2}/g);
      if (d) {
        return dates.push(d);
      }
    });
    if ($.isEmptyObject(dates)) {
      return;
    }
    dates = $.grep(dates, function (date) {
      return Syntax_Checker.isValidDate(new Date(date));
    });
    if (!$.isEmptyObject(dates)) {
      errors = [
        {
          code: dates.join(","),
          msg: Syntax_Checker.message["invalidDateFormat"],
          detail: Syntax_Checker.detail["invalidDateFormat"],
          ele: html,
          correct: Syntax_Checker.correctDateFormat,
          listkey: listkey
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctDateFormat = function (html) {
    var ret;
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/(\d{4})[\.\-\/](\d{1,2})[\.\-\/](\d{1,2})/g, function (date, y, m, d) {
        if (Syntax_Checker.isValidDate(new Date([y, m, d].join("/")))) {
          return y + "<%= I18n.t('datetime.prompts.year') %>" + m + "<%= I18n.t('datetime.prompts.month') %>" + d + "<%= I18n.t('datetime.prompts.day') %>";
        } else {
          return date;
        }
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkAdjacentA = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find("a[href]").each(function () {
      var errors, next, href;

      href = $(this).attr("href");
      next = $(this).next("a[href]");

      if (next.length && href == next.attr("href")) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this) + Syntax_Checker.outerHtmlSummary(next),
            msg: Syntax_Checker.message["invalidAdjacentA"],
            detail: Syntax_Checker.detail["invalidAdjacentA"],
            ele: this,
            correct: Syntax_Checker.correctAdjacentA,
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.correctAdjacentA = function (a) {
    var next, href;

    href = $(a).attr("href");
    next = $(a).next("a[href]");

    if (next.length && href == next.attr("href")) {
      if ($(a).html() !== $(next).html()) {
        $(a).html($(a).html() + $(next).html());
      }
      next.remove();
    }
    return $(a).parents().last().html() || $(a).html();
  };

  Syntax_Checker.checkInterwordSpace = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find(":not(iframe)").each(function () {
      var errors, i, j, ref, results, text;
      text = $.trim(Syntax_Checker.justText(this));
      if (/[　]/.test(text)) {
        results = [];
        for (i = j = 0, ref = text.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (text.charCodeAt(i) >= 256) {
            errors = [
              {
                code: text,
                msg: Syntax_Checker.message["checkInterwordSpace"],
                detail: Syntax_Checker.detail["checkInterwordSpace"],
                listkey: listkey
              }
            ];
            Syntax_Checker.pushError(errors);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });
  };

  Syntax_Checker.checkLinkText = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find("a[href]").each(function () {
      var errors, text;
      text = $(this).text();
      if (text.length <= 3) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkLinkText"],
            detail: Syntax_Checker.detail["checkLinkText"],
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkObjectText = function (html, opts) {
    var listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find("object").each(function () {
      var errors, text;
      text = $(this).text();
      if (!$.trim(text)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkObjectText"],
            detail: Syntax_Checker.detail["checkObjectText"],
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkEmbeddedMedia = function (html, opts) {
    var regExt, regSite, listkey;

    opts = opts || {};
    listkey = opts["listkey"];

    $(html).find("embed,video").each(function () {
      var errors;
      errors = [
        {
          code: this,
          msg: Syntax_Checker.message["checkEmbeddedMedia"],
          detail: Syntax_Checker.detail["checkEmbeddedMedia"],
          listkey: listkey
        }
      ];
      return Syntax_Checker.pushError(errors);
    });
    regExt = new RegExp("(" + Syntax_Checker.mediaExtensions.join("|") + ")", "i");
    regSite = /https?:\/\/www\.youtube\.com\//;
    $(html).find("iframe[src]").each(function () {
      var errors, ext, src;
      src = $(this).attr("src");
      ext = src.replace(/\?.*$/, "").replace(/.*\//, '').split(".").pop();
      if (regExt.test(ext) || regSite.test(src)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkEmbeddedMedia"],
            detail: Syntax_Checker.detail["checkEmbeddedMedia"],
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
    return $(html).find("a[href]").each(function () {
      var errors, ext, href;
      href = $(this).attr("href");
      ext = href.replace(/\?.*$/, "").replace(/.*\//, '').split(".").pop();
      if (regExt.test(ext) || regSite.test(href)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkEmbeddedMedia"],
            detail: Syntax_Checker.detail["checkEmbeddedMedia"],
            listkey: listkey
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  return Syntax_Checker;

})();
