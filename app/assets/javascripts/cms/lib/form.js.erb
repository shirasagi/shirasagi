this.Cms_Form = (function () {
  function Cms_Form() {
  }

  Cms_Form.render = function () {
    //$(window).load ->
    Syntax_Checker.render();
    Link_Checker.render();
    Mobile_Size_Checker.render();
    Form_Alert.addValidation(Form_Alert.clonedName);
    Form_Alert.addValidation(Form_Alert.closeConfirmation);
    //Form_Alert.addValidation(Form_Alert.presence)
    Form_Alert.addValidation(Form_Alert.validateReplaceWord);
    Form_Alert.addValidation(Syntax_Checker.validateHtml);
    Form_Alert.addValidation(Mobile_Size_Checker.validateHtml);
    if (Syntax_Checker.autoCorrect) {
      Form_Alert.addBeforeSave(Syntax_Checker.correctAll);
    }
    Form_Alert.render();
    return Form_Preview.render();
  };

  Cms_Form.addonSelector = ".mod-cms-body";

  Cms_Form.editorId = "item_html";

  Cms_Form.getEditorHtml = function (id) {
    var html;
    if (id == null) {
      id = null;
    }
    id || (id = Cms_Form.editorId);
    if (typeof tinymce !== 'undefined') {
      html = "<div>" + tinymce.get(id).getContent() + "</div>";
    } else if (typeof CKEDITOR !== 'undefined') {
      html = "<div>" + CKEDITOR.instances[id].getData() + "</div>";
    } else {
      html = "";
    }
    return html;
  };

  Cms_Form.setEditorHtml = function (html, id) {
    if (id == null) {
      id = null;
    }
    id || (id = Cms_Form.editorId);
    if (typeof tinymce !== 'undefined') {
      return tinymce.get(id).setContent(html);
    } else if (typeof CKEDITOR !== 'undefined') {
      return CKEDITOR.instances[id].setData(html);
    }
  };

  return Cms_Form;

})();

this.Syntax_Checker = (function () {
  function Syntax_Checker() {
  }

  Syntax_Checker.message = {
    notSetImgAlt: "<%= I18n.t('errors.messages.set_img_alt') %>",
    notSetAppletAlt: "<%= I18n.t('errors.messages.set_applet_alt') %>",
    notSetAreaAlt: "<%= I18n.t('errors.messages.set_area_alt') %>",
    invalidImgScheme: "<%= I18n.t('errors.messages.invalid_img_scheme') %>",
    notSetTableCaption: "<%= I18n.t('errors.messages.set_table_caption') %>",
    notSetThScope: "<%= I18n.t('errors.messages.set_th_scope') %>",
    invalidOrderOfH: "<%= I18n.t('errors.messages.invalid_order_of_h') %>",
    invalidMultibyteCharacter: "<%= I18n.t('errors.messages.invalid_multibyte_character') %>",
    invalidKanaCharacter: "<%= I18n.t('errors.messages.invalid_kana_character') %>",
    invalidDateFormat: "<%= I18n.t('errors.messages.invalid_date_format') %>",
    invalidAdjacentA: "<%= I18n.t('errors.messages.invalid_adjacent_a') %>",
    checkInterwordSpace: "<%= I18n.t('errors.messages.check_interword_space') %>",
    checkLinkText: "<%= I18n.t('errors.messages.check_link_text') %>",
    checkObjectText: "<%= I18n.t('errors.messages.check_object_text') %>",
    checkEmbeddedMedia: "<%= I18n.t('errors.messages.check_embedded_media') %>",
    replaceWord: "<%= I18n.t('errors.messages.replace_word') %>"
  };

  Syntax_Checker.detail = {
    notSetImgAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_img_alt').to_json %>,
    notSetAppletAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_applet_alt').to_json %>,
    notSetAreaAlt: <%= I18n.t('errors.messages.syntax_check_detail.set_area_alt').to_json %>,
    invalidImgScheme: <%= I18n.t('errors.messages.syntax_check_detail.invalid_img_scheme').to_json %>,
    notSetTableCaption: <%= I18n.t('errors.messages.syntax_check_detail.set_table_caption').to_json %>,
    notSetThScope: <%= I18n.t('errors.messages.syntax_check_detail.set_th_scope').to_json %>,
    invalidOrderOfH: <%= I18n.t('errors.messages.syntax_check_detail.invalid_order_of_h').to_json %>,
    invalidMultibyteCharacter: <%= I18n.t('errors.messages.syntax_check_detail.invalid_multibyte_character').to_json %>,
    invalidKanaCharacter: <%= I18n.t('errors.messages.syntax_check_detail.invalid_kana_character').to_json %>,
    invalidDateFormat: <%= I18n.t('errors.messages.syntax_check_detail.invalid_date_format').to_json %>,
    invalidAdjacentA: <%= I18n.t('errors.messages.syntax_check_detail.invalid_adjacent_a').to_json %>,
    checkInterwordSpace: <%= I18n.t('errors.messages.syntax_check_detail.check_interword_space').to_json %>,
    checkLinkText: <%= I18n.t('errors.messages.syntax_check_detail.check_link_text').to_json %>,
    checkObjectText: <%= I18n.t('errors.messages.syntax_check_detail.check_object_text').to_json %>,
    checkEmbeddedMedia: <%= I18n.t('errors.messages.syntax_check_detail.check_embedded_media').to_json %>
  };

  Syntax_Checker.mediaExtensions = ["aac", "aif", "aiff", "au", "avi", "flac", "flv", "mid", "midi", "mp3", "m4a", "mp4", "mpg", "mpeg", "oga", "ogg", "tta", "vdo", "wav", "wma", "wmv"];

  Syntax_Checker.errors;

  Syntax_Checker.errorCount;

  Syntax_Checker.autoCorrect = false;

  Syntax_Checker.config = {};

  Syntax_Checker.enabled = true;

  Syntax_Checker.reset = function () {
    this.errors = {};
    this.errorCount = 0;
    $("#errorSyntaxChecker").remove();
  };

  Syntax_Checker.render = function () {
    return $("button.syntax-check").on("click", function () {
      return Syntax_Checker.check();
    });
  };

  Syntax_Checker.check = function (opts) {
    var html, result, ul;
    if (opts == null) {
      opts = {};
    }
    Syntax_Checker.reset();
    html = Cms_Form.getEditorHtml();
    Syntax_Checker.checkTable(html);
    Syntax_Checker.checkMultibyteCharacter(html);
    Syntax_Checker.checkKanaCharacter(html);
    Syntax_Checker.checkDateFormat(html);
    Syntax_Checker.checkAdjacentA(html);
    Syntax_Checker.checkOrderOfH(html);
    Syntax_Checker.checkImgAlt(html);
    Syntax_Checker.checkAppletAlt(html);
    Syntax_Checker.checkAreaAlt(html);
    Syntax_Checker.checkImgDataUriScheme(html);
    Syntax_Checker.checkInterwordSpace(html);
    Syntax_Checker.checkLinkText(html);
    Syntax_Checker.checkObjectText(html);
    Syntax_Checker.checkEmbeddedMedia(html);
    Syntax_Checker.checkReplaceWords(html);
    $('#errorSyntaxChecker').remove();
    result = $("<div>");
    result.attr('id', 'errorSyntaxChecker');
    result.attr('class', 'errorExplanation');
    result.append("<h2>" + "<%= I18n.t('cms.syntax_check') %>" + "</h2>");
    if (Syntax_Checker.errorCount > 0) {
      result.append("<p>" + "<%= I18n.t('errors.template.body') %>" + "</p>");
      result.append('<ul>');
      ul = result.find('ul:last');
      Syntax_Checker.appendMessage(ul, Syntax_Checker.errors);
      $(Cms_Form.addonSelector).find("dd:last").after(result);
      SS_Tooltips.render(".detail");
      return false;
    } else {
      result.append("<p>" + "<%= I18n.t('errors.template.no_errors') %>" + "</p>");
      $(Cms_Form.addonSelector).find("dd:last").after(result);
      return true;
    }
  };

  Syntax_Checker.validateHtml = function (form, submit) {
    var error, errors, i, key, ref, results;
    if (Syntax_Checker.enabled && !Syntax_Checker.check()) {
      ref = Syntax_Checker.errors;
      results = [];
      for (key in ref) {
        errors = ref[key];
        results.push((function () {
          var j, len, results1;
          results1 = [];
          for (i = j = 0, len = errors.length; j < len; i = ++j) {
            error = errors[i];
            if (error["correct"] && Syntax_Checker.autoCorrect) {
              results1.push(Form_Alert.add("<%= I18n.t('cms.auto_correct.notice') %>", this, error["msg"]));
            } else {
              results1.push(Form_Alert.add("<%= I18n.t('cms.syntax_check') %>", this, error["msg"]));
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };

  Syntax_Checker.correctAll = function (form, submit) {
    var html;
    html = Cms_Form.getEditorHtml();
    html = Syntax_Checker.correctMultibyteCharacter(html);
    html = Syntax_Checker.correctKanaCharacter("<div>" + html + "</div>");
    html = Syntax_Checker.correctDateFormat("<div>" + html + "</div>");
    if ($("<div>" + html + "</div>").find("table").length) {
      html = Syntax_Checker.correctTableCaption($("<div>" + html + "</div>").find("table"));
      html = Syntax_Checker.correctTableScope($("<div>" + html + "</div>").find("table"));
    }
    if ($("<div>" + html + "</div>").find("h1,h2,h3,h4,h5,h6").length) {
      html = Syntax_Checker.correctOrderOfH("<div>" + html + "</div>");
    }
    if ($("<div>" + html + "</div>").find("a[href]").length) {
      html = Syntax_Checker.correctAdjacentA($("<div>" + html + "</div>").find("a[href]"));
    }
    return Cms_Form.setEditorHtml(html);
  };

  Syntax_Checker.pushError = function (errors) {
    var key;
    key = Syntax_Checker.errorCount;
    Syntax_Checker.errors[key] = errors;
    Syntax_Checker.errorCount += 1;
    return key;
  };

  Syntax_Checker.isValidDate = function (date) {
    if (Object.prototype.toString.call(date) !== "[object Date]") {
      return false;
    }
    if (!isNaN(date.getTime()) && date.getYear() > 0) {
      return true;
    } else {
      return false;
    }
  };

  Syntax_Checker.justText = function (ele) {
    return $(ele).clone().children().remove().end().text();
  };

  Syntax_Checker.outerHtmlSummary = function (ele) {
    return $(ele).get(0).outerHTML.replace(/[\r\n]|&nbsp;/g, "");
  };

  Syntax_Checker.appendMessage = function (ul, errorHash) {
    var correct, detail, error, errors, i, key, li, message, results;
    results = [];
    for (key in errorHash) {
      errors = errorHash[key];
      ul.append('<li class="code">');
      ul.find('li:last').append('<code>');
      ul.append('<ul>');
      results.push((function () {
        var j, len, results1;
        results1 = [];
        for (i = j = 0, len = errors.length; j < len; i = ++j) {
          error = errors[i];
          ul.find('li:last code').text(error["code"]);
          ul.find('> ul:last').append('<li>');
          li = ul.find('> ul:last li:last');
          message = $('<span class="message detail">' + error["msg"] + '</span>');
          if (error["detail"]) {
            detail = $('<ul>').appendTo(message);
            $.each(error["detail"], function () {
              detail.append("<li>" + this + "</li>");
              return detail.hide();
            });
          }
          li.append(message);
          if (error["correct"] && error["ele"]) {
            correct = $('<a href="#" class="correct">' + "<%= I18n.t('cms.auto_correct.link') %>" + '</a>');
            correct.on("click", {
              error: error
            }, function (e) {
              var html;
              if (e.data.error["opts"]) {
                html = e.data.error["correct"](e.data.error["ele"], e.data.error["opts"]);
              } else {
                html = e.data.error["correct"](e.data.error["ele"]);
              }
              Cms_Form.setEditorHtml(html);
              $(Cms_Form.addonSelector).find("button.syntax-check").trigger("click");
              return false;
            });
            results1.push(li.append(correct));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  Syntax_Checker.checkImgAlt = function (html) {
    return $(html).find('img').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetImgAlt"],
            detail: Syntax_Checker.detail["notSetImgAlt"],
            ele: this
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkAppletAlt = function (html) {
    return $(html).find('applet').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetAppletAlt"],
            detail: Syntax_Checker.detail["notSetAppletAlt"],
            ele: this
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkAreaAlt = function (html) {
    return $(html).find('area').each(function () {
      var alt, errors;
      alt = $(this).attr('alt');
      if (!alt || $.trim(alt) === "" || /^[\w\s\.\-]*$/.test(alt)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["notSetAreaAlt"],
            detail: Syntax_Checker.detail["notSetAreaAlt"],
            ele: this
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkImgDataUriScheme = function (html) {
    return $(html).find('img[src]').each(function () {
      var errors, src;
      src = $(this).attr('src');
      if (/^data:.*?,.*?$/.test(src)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["invalidImgScheme"],
            detail: Syntax_Checker.detail["invalidImgScheme"],
            ele: this
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkTable = function (html) {
    return $(html).find("table").each(function () {
      var caption, errors, table;
      table = this;
      caption = $(this).find('caption');
      errors = [];
      if (!caption || $.trim(caption.text()) === "") {
        errors.push({
          code: Syntax_Checker.outerHtmlSummary(table),
          msg: Syntax_Checker.message["notSetTableCaption"],
          detail: Syntax_Checker.detail["notSetTableCaption"],
          ele: table,
          correct: Syntax_Checker.correctTableCaption
        });
      }
      $(table).find('th').each(function () {
        if (!$(this).attr("scope")) {
          errors.push({
            code: Syntax_Checker.outerHtmlSummary(table),
            msg: Syntax_Checker.message["notSetThScope"],
            detail: Syntax_Checker.detail["notSetThScope"],
            ele: table,
            correct: Syntax_Checker.correctTableScope
          });
          return false;
        }
      });
      if (!$.isEmptyObject(errors)) {
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.correctTableCaption = function (table) {
    $(table).find('caption').remove();
    $(table).prepend('<caption>' + "<%= I18n.t('cms.auto_correct.caption') %>" + '</caption>');
    return $(table).parents().last().html() || $(table).html();
  };

  Syntax_Checker.correctTableScope = function (table) {
    var scope;
    if ($(table).find("tr:first th").length === 1) {
      scope = "row";
    } else {
      scope = "col";
    }
    $(table).find("tr:first th").each(function () {
      if (!$(this).attr("scope")) {
        return $(this).attr("scope", scope);
      }
    });
    $(table).find("tr:not(:first) th").each(function () {
      if (!$(this).attr("scope")) {
        return $(this).attr("scope", "row");
      }
    });
    return $(table).parents().last().html() || $(table).html();
  };

  Syntax_Checker.checkOrderOfH = function (html) {
    var code, errors, h, i, j, ref;
    h = $(html).find("h1,h2,h3,h4,h5,h6");
    if (!h.length) {
      return;
    }
    code = "";
    for (i = j = 0, ref = h.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (i === 0) {
        if (!/h[12]/i.test(h[i].tagName)) {
          code += h[i].tagName + " ";
        }
      } else {
        if (/h3/i.test(h[i].tagName)) {
          if (!/h[23456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h4/i.test(h[i].tagName)) {
          if (!/h[3456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h5/i.test(h[i].tagName)) {
          if (!/h[456]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        } else if (/h6/i.test(h[i].tagName)) {
          if (!/h[56]/i.test(h[i - 1].tagName)) {
            code += h[i].tagName + " ";
          }
        }
      }
    }
    if (code !== "") {
      errors = [
        {
          code: code,
          msg: Syntax_Checker.message["invalidOrderOfH"],
          ele: html,
          detail: Syntax_Checker.detail["invalidOrderOfH"],
          correct: Syntax_Checker.correctOrderOfH
        }
      ];
      Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctOrderOfH = function (html) {
    var h, i, j, ref, replace;
    h = $(html).find("h1,h2,h3,h4,h5,h6");
    if (!h.length) {
      return $(html).parents().last().html();
    }
    replace = html;
    for (i = j = 0, ref = h.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (i === 0) {
        if (!/h[12]/i.test(h[i].tagName)) {
          replace = $('<h1>' + $(h[i]).html() + '</h1>');
          $(h[i]).after(replace).remove();
          h[i] = replace[0];
        }
      } else {
        if (/h3/i.test(h[i].tagName)) {
          if (!/h[23456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h4/i.test(h[i].tagName)) {
          if (!/h[3456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h5/i.test(h[i].tagName)) {
          if (!/h[456]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        } else if (/h6/i.test(h[i].tagName)) {
          if (!/h[56]/i.test(h[i - 1].tagName)) {
            replace = $('<' + h[i - 1].tagName.replace("1", "2") + '>');
            replace.html($(h[i]).html());
            $(h[i]).after(replace).remove();
            h[i] = replace[0];
          }
        }
      }
    }
    return $(replace).parents().last().html() || $(replace).html();
  };

  Syntax_Checker.checkMultibyteCharacter = function (html) {
    var chars, errors;
    chars = [];
    $(html).find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var c;
      c = this.textContent.match(/[Ａ-Ｚａ-ｚ０-９]/g);
      if (c) {
        return chars.push(c);
      }
    });
    if (!$.isEmptyObject(chars)) {
      errors = [
        {
          code: chars.join(","),
          msg: Syntax_Checker.message["invalidMultibyteCharacter"],
          detail: Syntax_Checker.detail["invalidMultibyteCharacter"],
          ele: html,
          correct: Syntax_Checker.correctMultibyteCharacter
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctMultibyteCharacter = function (html) {
    var ret;
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (c) {
        return String.fromCharCode(c.charCodeAt(0) - 0xFEE0);
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkKanaCharacter = function (html) {
    var c, errors;
    c = html.match(/[｡-ﾟ]/g);
    if (!$.isEmptyObject(c)) {
      errors = [
        {
          code: c.join(","),
          msg: Syntax_Checker.message["invalidKanaCharacter"],
          detail: Syntax_Checker.detail["invalidKanaCharacter"],
          ele: html,
          correct: Syntax_Checker.correctKanaCharacter
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.checkReplaceWords = function (html) {
    var c, errors, k, results, v, words;
    words = Syntax_Checker.config["replace_words"];
    if (!words) {
      return;
    }
    results = [];
    for (k in words) {
      v = words[k];
      c = html.match(RegExp("" + k.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1'), "g"));
      if (!$.isEmptyObject(c)) {
        errors = [
          {
            code: c[0],
            msg: Syntax_Checker.message["replaceWord"] + ("「" + k + "」→「" + v + "」"),
            ele: html,
            correct: Syntax_Checker.correctReplaceWords,
            opts: {
              key: k,
              value: v
            }
          }
        ];
        results.push(Syntax_Checker.pushError(errors));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Syntax_Checker.correctReplaceWords = function (html, opts) {
    var key, ret, value;
    if (opts == null) {
      opts = {};
    }
    key = opts["key"];
    value = opts["value"];
    if (!(key || value)) {
      return;
    }
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(RegExp("" + key.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1'), "g"), function (c) {
        return value;
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.correctKanaCharacter = function (html) {
    var full, half, i, j, kanaMap, len, ret, v;
    half = "｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ".split("");
    full = "。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜".split("");
    kanaMap = {};
    for (i = j = 0, len = half.length; j < len; i = ++j) {
      v = half[i];
      kanaMap[v] = full[i];
    }
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/[｡-ﾟ]/g, function (c) {
        return kanaMap[c];
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkDateFormat = function (html) {
    var dates, errors;
    dates = [];
    $(html).find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var d;
      d = this.textContent.match(/\d{4}[\.\-\/]\d{1,2}[\.\-\/]\d{1,2}/g);
      if (d) {
        return dates.push(d);
      }
    });
    if ($.isEmptyObject(dates)) {
      return;
    }
    dates = $.grep(dates, function (date) {
      return Syntax_Checker.isValidDate(new Date(date));
    });
    if (!$.isEmptyObject(dates)) {
      errors = [
        {
          code: dates.join(","),
          msg: Syntax_Checker.message["invalidDateFormat"],
          detail: Syntax_Checker.detail["invalidDateFormat"],
          ele: html,
          correct: Syntax_Checker.correctDateFormat
        }
      ];
      return Syntax_Checker.pushError(errors);
    }
  };

  Syntax_Checker.correctDateFormat = function (html) {
    var ret;
    ret = $(html);
    ret.find(":not(iframe)").addBack().contents().filter(function () {
      return this.nodeType === 3;
    }).each(function () {
      var text;
      text = this.textContent.replace(/(\d{4})[\.\-\/](\d{1,2})[\.\-\/](\d{1,2})/g, function (date, y, m, d) {
        if (Syntax_Checker.isValidDate(new Date([y, m, d].join("/")))) {
          return y + "<%= I18n.t('datetime.prompts.year') %>" + m + "<%= I18n.t('datetime.prompts.month') %>" + d + "<%= I18n.t('datetime.prompts.day') %>";
        } else {
          return date;
        }
      });
      return this.textContent = text;
    });
    return ret.html();
  };

  Syntax_Checker.checkAdjacentA = function (html) {
    return $(html).find("a[href]").each(function () {
      var errors, next, href;

      href = $(this).attr("href");
      next = $(this).next("a[href]");

      if (next.length && href == next.attr("href")) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this) + Syntax_Checker.outerHtmlSummary(next),
            msg: Syntax_Checker.message["invalidAdjacentA"],
            detail: Syntax_Checker.detail["invalidAdjacentA"],
            ele: this,
            correct: Syntax_Checker.correctAdjacentA
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.correctAdjacentA = function (a) {
    var next, href;

    href = $(a).attr("href");
    next = $(a).next("a[href]");

    if (next.length && href == next.attr("href")) {
      if ($(a).html() !== $(next).html()) {
        $(a).html($(a).html() + $(next).html());
      }
      next.remove();
    }
    return $(a).parents().last().html() || $(a).html();
  };

  Syntax_Checker.checkInterwordSpace = function (html) {
    return $(html).find(":not(iframe)").each(function () {
      var errors, i, j, ref, results, text;
      text = $.trim(Syntax_Checker.justText(this));
      if (/[　]/.test(text)) {
        results = [];
        for (i = j = 0, ref = text.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (text.charCodeAt(i) >= 256) {
            errors = [
              {
                code: text,
                msg: Syntax_Checker.message["checkInterwordSpace"],
                detail: Syntax_Checker.detail["checkInterwordSpace"]
              }
            ];
            Syntax_Checker.pushError(errors);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });
  };

  Syntax_Checker.checkLinkText = function (html) {
    return $(html).find("a[href]").each(function () {
      var errors, text;
      text = $(this).text();
      if (text.length <= 3) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkLinkText"],
            detail: Syntax_Checker.detail["checkLinkText"]
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkObjectText = function (html) {
    $(html).find("object").each(function () {
      var errors, text;
      text = $(this).text();
      if (!$.trim(text)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkObjectText"],
            detail: Syntax_Checker.detail["checkObjectText"]
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  Syntax_Checker.checkEmbeddedMedia = function (html) {
    var regExt, regSite;
    $(html).find("embed,video").each(function () {
      var errors;
      errors = [
        {
          code: this,
          msg: Syntax_Checker.message["checkEmbeddedMedia"],
          detail: Syntax_Checker.detail["checkEmbeddedMedia"]
        }
      ];
      return Syntax_Checker.pushError(errors);
    });
    regExt = new RegExp("(" + Syntax_Checker.mediaExtensions.join("|") + ")", "i");
    regSite = /https?:\/\/www\.youtube\.com\//;
    $(html).find("iframe[src]").each(function () {
      var errors, ext, src;
      src = $(this).attr("src");
      ext = src.replace(/\?.*$/, "").replace(/.*\//, '').split(".").pop();
      if (regExt.test(ext) || regSite.test(src)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkEmbeddedMedia"],
            detail: Syntax_Checker.detail["checkEmbeddedMedia"]
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
    return $(html).find("a[href]").each(function () {
      var errors, ext, href;
      href = $(this).attr("href");
      ext = href.replace(/\?.*$/, "").replace(/.*\//, '').split(".").pop();
      if (regExt.test(ext) || regSite.test(href)) {
        errors = [
          {
            code: Syntax_Checker.outerHtmlSummary(this),
            msg: Syntax_Checker.message["checkEmbeddedMedia"],
            detail: Syntax_Checker.detail["checkEmbeddedMedia"]
          }
        ];
        return Syntax_Checker.pushError(errors);
      }
    });
  };

  return Syntax_Checker;

})();

this.Mobile_Size_Checker = (function () {
  function Mobile_Size_Checker() {
  }

  Mobile_Size_Checker.message = {
    header: "<%= I18n.t('cms.mobile_size_check') %>",
    body: "",
    success: "<%= I18n.t('errors.messages.mobile_size_check_success') %>",
    failure: "<%= I18n.t('errors.messages.mobile_size_check_failure') %>",
    mobile_disable: "<%= I18n.t('errors.messages.mobile_size_check_disable') %>",
    mobile_check: "<%= I18n.t('errors.messages.mobile_size_check_size') %>",
    SizeCheckServerError: "<%= I18n.t('errors.messages.mobile_size_check_server_error') %>"
  };

  Mobile_Size_Checker.error = [];

  Mobile_Size_Checker.url = "/.cms/mobile_size_check/check.json";

  Mobile_Size_Checker.rootUrl = "";

  Mobile_Size_Checker.imgs = [];

  Mobile_Size_Checker.hostFullUrl = "";

  Mobile_Size_Checker.render = function () {
    return $("button.mobile-size-check").on("click", function () {
      var button, html, result;
      button = this;
      $(button).attr('disabled', true);
      Mobile_Size_Checker.reset();
      if (!Mobile_Size_Checker.enabled) {
        result = Mobile_Size_Checker.result_open();
        result.append("<p>" + Mobile_Size_Checker.message["mobile_disable"] + "</p>");
        Mobile_Size_Checker.result_close(result);
        $(button).removeAttr('disabled');
        return;
      }
      html = Cms_Form.getEditorHtml();
      Mobile_Size_Checker.check(html, true, function () {
        var err, j, len, ref;
        result = Mobile_Size_Checker.result_open();
        if (Mobile_Size_Checker.error.length > 0) {
          ref = Mobile_Size_Checker.error;
          for (j = 0, len = ref.length; j < len; j++) {
            err = ref[j];
            result.append('<p class="error">' + err + '</p>');
          }
        } else {
          result.append("<p>" + Mobile_Size_Checker.message["mobile_check"] + "</p>");
        }
        Mobile_Size_Checker.result_close(result);
        $(button).removeAttr('disabled');
      });
    });
  };

  Mobile_Size_Checker.result_open = function () {
    var result;
    result = $("<div>");
    result.attr('id', 'errorMobileChecker');
    result.attr('class', 'errorExplanation');
    result.append("<h2>" + Mobile_Size_Checker.message["header"] + "</h2>");
    return result;
  };

  Mobile_Size_Checker.result_close = function (result) {
    $(Cms_Form.addonSelector).find("#errorMobileChecker").remove();
    $(Cms_Form.addonSelector).append(result);
  };

  Mobile_Size_Checker.reset = function () {
    this.message["body"] = "";
    $("#errorMobileChecker").remove();
    this.imgs = {};
    this.error = "";
  };

  Mobile_Size_Checker.addMessage = function (imgs, state) {
    var msg;
    if (state) {
      msg = '<span class="success">' + Mobile_Size_Checker.message["success"] + '</span>';
      return Mobile_Size_Checker.imgs[imgs] = imgs + " " + msg;
    } else {
      msg = '<span class="failure">' + Mobile_Size_Checker.message["failure"] + '</span>';
      return Mobile_Size_Checker.imgs[imgs] = imgs + " " + msg;
    }
  };

  Mobile_Size_Checker.get_str_byte = function (str) {
    var ESCAPECHAR, ESCAPEDLEN_TABLE, char, i, size;
    ESCAPECHAR = ";,/?:@&=+$ ";
    ESCAPEDLEN_TABLE = [0, 1, 1, 1, 2, 3, 2, 3, 4, 3];
    size = 0;
    if (str === null || str === "") {
      return size;
    }
    for (i in str) {
      char = str[i];
      if (ESCAPECHAR.indexOf(char) >= 0) {
        size++;
      } else {
        size += ESCAPEDLEN_TABLE[encodeURI(char).length];
      }
    }
    return size;
  };

  Mobile_Size_Checker.check = function (html, async, complete) {
    var err_str, imgs, isThumb, j, len, mobile_size, numOfImage, ref, size, src, str_id, str_src;
    mobile_size = Mobile_Size_Checker.mobile_size;
    size = Mobile_Size_Checker.get_str_byte(html);
    if (mobile_size < size) {
      err_str = "<p class=\"error\">";
      err_str += Mobile_Size_Checker.message["SizeCheckError"];
      err_str += "(本文サイズ：" + (parseInt(size / 1024)) + "KB";
      err_str += "</p>";
      Mobile_Size_Checker.error = [err_str];
      complete();
      return;
    }
    numOfImage = $(html).find('img').length;
    if (numOfImage === 0) {
      complete();
      return;
    }
    imgs = [];
    isThumb = {};
    ref = $(html).find('img[src]');
    for (j = 0, len = ref.length; j < len; j++) {
      src = ref[j];
      str_src = $(src).attr('src');
      str_src = str_src.replace(Mobile_Size_Checker.hostFullUrl.replace(/\/$/, ""), "");
      str_id = str_src.match(/^\/fs\/(.+?)\/_\//);
      isThumb[str_id[1].replace(/\//g, "")] = str_src.match(/_\/thumb\//);
      imgs.push(parseInt(str_id[1].replace(/\//g, "")));
    }
    $.ajax({
      type: "POST",
      url: Mobile_Size_Checker.url,
      cache: false,
      data: JSON.stringify({
        img_ids: imgs,
        mobile_size: mobile_size,
        is_thumb: isThumb
      }),
      contentType: 'application/json',
      dataType: "json",
      crossDomain: true,
      async: async,
      success: function (res, status) {
        if (res["errors"].length > 0) {
          return Mobile_Size_Checker.error = res["errors"];
        }
      },
      error: function (xhr, status, error) {
        var str_err;
        str_err = "<p>";
        str_err += Mobile_Size_Checker.message["SizeCheckServerError"];
        str_err += "</p>";
        Mobile_Size_Checker.error = [str_err];
      },
      complete: function (xhr, status) {
        complete();
      }
    });
  };

  Mobile_Size_Checker.checkHtmlSize = function (html) {
    Mobile_Size_Checker.reset();
    if (Mobile_Size_Checker.enabled) {
      return Mobile_Size_Checker.check(html, false, function () {
        var err, errors, j, len, ref, result;
        if (Mobile_Size_Checker.error.length > 0) {
          result = Mobile_Size_Checker.result_open();
          errors = [];
          ref = Mobile_Size_Checker.error;
          for (j = 0, len = ref.length; j < len; j++) {
            err = ref[j];
            errors.push({
              code: "",
              msg: err,
              detail: err
            });
            result.append('<p class="error">' + err + '</p>');
          }
          Syntax_Checker.pushError(errors);
          return Mobile_Size_Checker.result_close(result);
        }
      });
    }
  };

  Mobile_Size_Checker.validateHtml = function (form, submit) {
    var count, error, html, i, j, len, ref, results;
    count = Syntax_Checker.errorCount;
    html = Cms_Form.getEditorHtml();
    if (!Mobile_Size_Checker.checkHtmlSize(html)) {
      if (Syntax_Checker.errors[count]) {
        ref = Syntax_Checker.errors[count];
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          error = ref[i];
          if (error["correct"] && Syntax_Checker.autoCorrect) {
            results.push(Form_Alert.add("<%= I18n.t('cms.auto_correct.notice') %>", this, error["msg"]));
          } else {
            results.push(Form_Alert.add("<%= I18n.t('cms.mobile_size_check') %>", this, error["msg"]));
          }
        }
        return results;
      }
    }
  };

  return Mobile_Size_Checker;

})();

this.Link_Checker = (function () {
  function Link_Checker() {
  }

  Link_Checker.message = {
    header: "<%= I18n.t('cms.link_check') %>",
    noLinks: "<%= I18n.t('errors.template.no_links') %>",
    checkLinks: "<%= I18n.t('errors.template.check_links') %>",
    success: "<%= I18n.t('errors.messages.link_check_success') %>",
    failure: "<%= I18n.t('errors.messages.link_check_failure') %>",
    linkCheckerError: "<%= I18n.t('errors.messages.link_check_failed_to_connect') %>"
  };

  Link_Checker.links = {};

  Link_Checker.error = "";

  Link_Checker.url = "/.cms/link_check/check.json";

  Link_Checker.rootUrl = "";

  Link_Checker.render = function () {
    return $("button.link-check").on("click", function () {
      var button, html;
      $.support.cors = true;
      button = this;
      $(button).attr('disabled', true);
      Link_Checker.reset();
      html = Cms_Form.getEditorHtml();
      Link_Checker.check(html, function () {
        var link, msg, ref, result, ul;
        result = $("<div>");
        result.attr('id', 'errorLinkChecker');
        result.attr('class', 'errorExplanation');
        result.append("<h2>" + Link_Checker.message["header"] + "</h2>");
        if (Link_Checker.error !== "") {
          result.append(Link_Checker.error);
        } else {
          result.append("<p>" + Link_Checker.message["checkLinks"] + "</p>");
          result.append('<ul>');
          ul = result.find('ul');
          ref = Link_Checker.links;
          for (link in ref) {
            msg = ref[link];
            ul.append('<li>');
            ul.find('li:last').append(msg);
          }
        }
        $(Cms_Form.addonSelector).find("#errorLinkChecker").remove();
        $(Cms_Form.addonSelector).append(result);
        $(button).removeAttr('disabled');
      });
    });
  };

  Link_Checker.reset = function () {
    $("#errorLinkChecker").remove();
    this.links = {};
    this.error = "";
  };

  Link_Checker.addMessage = function (link, state) {
    var msg;
    if (state) {
      msg = '<span class="success">' + Link_Checker.message["success"] + '</span>';
      return Link_Checker.links[link] = link + " " + msg;
    } else {
      msg = '<span class="failure">' + Link_Checker.message["failure"] + '</span>';
      return Link_Checker.links[link] = link + " " + msg;
    }
  };

  Link_Checker.check = function (html, complete) {
    var href, j, len, link, links, numOfLinks, ref;
    numOfLinks = $(html).find('a[href]').length;
    if (numOfLinks === 0) {
      Link_Checker.error = "<p>" + Link_Checker.message["noLinks"] + "</p>";
      complete();
      return;
    }
    links = [];
    ref = $(html).find('a[href]');
    for (j = 0, len = ref.length; j < len; j++) {
      href = ref[j];
      link = $(href).attr('href');
      if (link === "#") {
        continue;
      }
      if (link[0] === "#") {
        Link_Checker.addMessage(link, $(html).find(link).length !== 0);
      } else {
        if (/^\//.test(link)) {
          link = Link_Checker.rootUrl + link.slice(1);
        }
        links.push(link);
      }
    }
    $.ajax({
      type: "POST",
      url: Link_Checker.url,
      cache: false,
      data: JSON.stringify({
        "url": links
      }),
      contentType: 'application/json',
      dataType: "json",
      crossDomain: true,
      success: function (res, status) {
        var code;
        for (link in res) {
          code = res[link];
          Link_Checker.addMessage(link, code === 200);
        }
      },
      error: function (xhr, status, error) {
        Link_Checker.error = "<p>" + Link_Checker.message["linkCheckerError"] + ": " + Link_Checker.url + "</p>";
      },
      complete: function (xhr, status) {
        complete();
      }
    });
  };

  return Link_Checker;

})();

this.Form_Alert = (function () {
  function Form_Alert() {
  }

  Form_Alert.alerts = [];

  Form_Alert.validations = [];

  Form_Alert.beforeSaves = [];

  Form_Alert.render = function () {
    return $("input:submit").on("click.form_alert", function (e) {
      var addon, div, field, fields, footer, form, i, j, len, ref, submit, ul;
      submit = this;
      form = $(submit).closest("form");
      if (!Form_Alert.validate(form, submit)) {
        div = $('<div id="alertExplanation" class="errorExplanation">');
        div.append("<h2><%= I18n.t('cms.alert') %></h2>");
        ref = Form_Alert.alerts;
        for (addon in ref) {
          fields = ref[addon];
          div.append('<p>' + addon + '</p>');
          ul = $("<ul>").appendTo(div);
          for (i = j = 0, len = fields.length; j < len; i = ++j) {
            field = fields[i];
            if (field["msg"]) {
              ul.append('<li>' + field["msg"] + '</li>');
            }
          }
        }
        // caution: below IE8, you must use document.createElement() method to create <footer>
        footer = $(document.createElement("footer")).addClass('send');
        footer.append('<button name="button" type="button" class="btn-primary save"><%= I18n.t("ss.buttons.ignore_alert") %></button>');
        footer.append('<button name="button" type="button" class="btn-default cancel"><%= I18n.t("ss.buttons.cancel") %></button>');
        $.colorbox({
          html: div.get(0).outerHTML + footer.get(0).outerHTML,
          maxHeight: "80%",
          fixed: true
        });
        $("#cboxLoadedContent").find(".save").on("click", {
          submit: submit
        }, function () {
          Form_Alert.runBeforeSave(form, submit);
          $(submit).off(".form_alert");
          return $(submit).trigger("click");
        });
        $("#cboxLoadedContent").find(".cancel").on("click", function (e) {
          $.colorbox.close();
          return false;
        });
        return false;
      }
    });
  };

  Form_Alert.validate = function (form, submit) {
    Form_Alert.alerts = {};
    $.each(Form_Alert.validations, function () {
      return this(form, submit);
    });
    if ($.isEmptyObject(Form_Alert.alerts)) {
      return true;
    } else {
      return false;
    }
  };

  Form_Alert.addValidation = function (validate) {
    return Form_Alert.validations.push(validate);
  };

  Form_Alert.runBeforeSave = function (form, submit) {
    return $.each(Form_Alert.beforeSaves, function () {
      return this(form, submit);
    });
  };

  Form_Alert.addBeforeSave = function (callback) {
    return Form_Alert.beforeSaves.push(callback);
  };

  Form_Alert.presence = function (form, submit) {
    return $(form).find("input.presence,textarea.presence").each(function () {
      var addonName, fieldName;
      if ($(this).val() === "") {
        $(this).closest("dl").show();
        addonName = $(this).closest(".addon-view").find("header").text();
        fieldName = Form_Alert.justText($(this).closest("dd").prev("dt"));
        return Form_Alert.add(addonName, this, fieldName + "<%= I18n.t('errors.messages.blank') %>");
      }
    });
  };

  Form_Alert.clonedName = function (form, submit) {
    var addonName, fieldName, name;
    name = $(form).find("#addon-basic #item_name");
    if ($(submit).hasClass("publish_save") && /^\[<%= I18n.t('workflow.cloned_name_prefix') %>\]/.test($(name).val())) {
      addonName = $(name).closest(".addon-view").find("header").text();
      fieldName = Form_Alert.justText($(name).closest("dd").prev("dt"));
      return Form_Alert.add(addonName, name, "<%= I18n.t('errors.messages.cloned_name') %>");
    }
  };

  Form_Alert.closeConfirmation = function (form, submit) {
    var addonName, msg;
    if ($(submit).attr("data-close-confirmation")) {
      addonName = '<%= I18n.t("cms.confirm.close") %>';
      msg = null;
      if ($(submit).attr("data-contain-links-path")) {
        msg = '<a href="' + $(submit).attr("data-contain-links-path") + '" target="_blank">' + '<%= I18n.t("cms.confirm.check_contains_urls") %>' + '</a>';
      }
      return Form_Alert.add(addonName, null, msg);
    }
  };

  Form_Alert.add = function (addon, ele, msg) {
    var base;
    (base = Form_Alert.alerts)[addon] || (base[addon] = []);
    return Form_Alert.alerts[addon].push({
      "ele": ele,
      "msg": msg
    });
  };

  Form_Alert.justText = function (ele) {
    return $(ele).clone().children().remove().end().text();
  };

  Form_Alert.validateReplaceWord = function (form, submit) {
    var addonIds, excludes, k, results, v, words;
    words = Syntax_Checker.config["replace_words"];
    if (!words) {
      return;
    }
    addonIds = ["#addon-basic", "#addon-cms-agents-addons-meta", "#addon-event-agents-addons-date", "#addon-map-agents-addons-page"];
    excludes = ['[name="item[basename]"]', "location-search.keyword"];
    results = [];
    for (k in words) {
      v = words[k];
      results.push($(form).find(addonIds.join(",")).find("input,textarea").not(excludes.join(",")).each(function () {
        var addonName, fieldName, val;
        val = $(this).val();
        if (val && !$.isEmptyObject(val.match(RegExp("" + k.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1'), "g")))) {
          $(this).closest("dl").show();
          addonName = $(this).closest(".addon-view").find(".addon-head").text();
          fieldName = Form_Alert.justText($(this).closest("dd").prev("dt"));
          return Form_Alert.add(addonName, this, fieldName + "<%= I18n.t('errors.messages.replace_word_validation') %>" + ("「" + k + "」→「" + v + "」"));
        }
      }));
    }
    return results;
  };

  return Form_Alert;

})();

this.Form_Preview = (function () {
  function Form_Preview() {
  }

  Form_Preview.form_preview_path;

  Form_Preview.page_route;

  Form_Preview.render = function () {
    return $("button.preview").on("click", function (e) {
      var basename, errors, form, height, i, name, ref, token, v, width;
      name = $("#item-form input[name='item[name]']").val();
      basename = $("#item-form input[name='item[basename]']").val();
      errors = [];
      if (!name) {
        errors.push("<%= I18n.t('errors.messages.set_name') %>");
      }
      if (basename) {
        if (!/^[\w\-]+(\.html)?$/.test(basename)) {
          errors.push("<%= I18n.t('errors.messages.invalid_filename') %>");
        }
      } else {
        errors.push("<%= I18n.t('errors.messages.set_filename') %>");
      }
      if (!$.isEmptyObject(errors)) {
        alert(errors.join("\n"));
        return false;
      }
      token = $('meta[name="csrf-token"]').attr('content');
      form = $("<form>");
      $(form).attr("method", "post");
      $(form).attr("action", Form_Preview.form_preview_path);
      $(form).attr("target", "FormPreview");
      ref = $("#item-form").serializeArray();
      for (i in ref) {
        v = ref[i];
        if (!/^item\[/.test(v["name"])) {
          continue;
        }
        if ("item[html]" === v["name"]) {
          continue;
        }
        if ("item[body_parts][]" === v["name"]) {
          continue;
        }
        form.append($("<input/>", {
          name: v["name"].replace(/^item\[/, "preview_item["),
          value: v["value"],
          type: "hidden"
        }));
      }
      $("textarea[id^=item_html_part_]").each(function () {
        var id;
        id = $(this).attr("id");
        name = $(this).attr("name").replace(/^item\[/, "preview_item[");
        return form.append($("<input/>", {
          name: name,
          value: Cms_Form.getEditorHtml(id),
          type: "hidden"
        }));
      });
      form.append($("<input/>", {
        name: "preview_item[route]",
        value: Form_Preview.page_route,
        type: "hidden"
      }));
      form.append($("<input/>", {
        name: "preview_item[html]",
        value: Cms_Form.getEditorHtml("item_html"),
        type: "hidden"
      }));
      form.append($("<input/>", {
        name: "authenticity_token",
        value: token,
        type: "hidden"
      }));
      width = $(window).width();
      height = $(window).height();
      window.open("about:blank", "FormPreview", "width=" + width + ",height=" + height + ",resizable=yes,scrollbars=yes");
      form.appendTo("body");
      form.submit();
      return false;
    });
  };

  return Form_Preview;

})();

this.Form_Save_Event = (function () {
  function Form_Save_Event() {
  }

  Form_Save_Event.render = function () {
    return document.onkeydown = function (e) {
      if (event.ctrlKey || event.metaKey) {
        if (event.keyCode === 83) {
          event.keyCode = 0;
          $("#item-form").submit();
          return false;
        }
      }
    };
  };

  return Form_Save_Event;

})();
