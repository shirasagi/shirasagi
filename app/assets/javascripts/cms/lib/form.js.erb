//= require cms/lib/form
//= require cms/lib/form_alert
//= require cms/lib/form_preview
//= require cms/lib/form_save_event
//= require cms/lib/inplace_form
//= require cms/lib/syntax_checker
//= require cms/lib/form_checker
//= require cms/lib/mobile_size_checker
//= require cms/lib/link_checker

this.Cms_Form = (function () {
  function Cms_Form() {};

  Cms_Form.options = { check: { syntax: true } };
  Cms_Form.addonSelector = ".mod-cms-body";

  Cms_Form.render = function () {
    // handle Syntax_Checker
    if(Cms_Form.options.check.syntax) {
      Syntax_Checker.render(Cms_Form, { afterCheck: Cms_Form.afterSyntaxCheck });
    }

    // handle Link_Checker
    Link_Checker.render();

    // handle Mobile_Size_Checker
    Mobile_Size_Checker.render();

    // handle Form_Alert
    Form_Alert.addValidation(Form_Alert.clonedName);
    Form_Alert.addValidation(Form_Alert.closeConfirmation);
    if(Cms_Form.options.check.syntax) {
      Form_Alert.addAsyncValidation(Form_Alert.asyncValidateSyntaxCheck);
    }
    Form_Alert.addAsyncValidation(Mobile_Size_Checker.asyncValidateHtml);
    Form_Alert.render();

    // handle Form_Preview
    Form_Preview.render();
  };

  // wiziwig editor
  Cms_Form.editorId = "item_html";
  Cms_Form.getEditorHtml = function (id) {
    var html;
    if (id == null) {
      id = null;
    }
    id || (id = Cms_Form.editorId);
    if (typeof tinymce !== 'undefined') {
      html = "<div>" + tinymce.get(id).getContent() + "</div>";
    } else if (typeof CKEDITOR !== 'undefined') {
      html = "<div>" + CKEDITOR.instances[id].getData() + "</div>";
    } else {
      html = "";
    }
    return html;
  };
  Cms_Form.setEditorHtml = function (html, opts) {
    opts = opts || {}
    id = opts["id"];

    if (id == null) {
      id = null;
    }
    id || (id = Cms_Form.editorId);
    if (typeof tinymce !== 'undefined') {
      return tinymce.get(id).setContent(html);
    } else if (typeof CKEDITOR !== 'undefined') {
      return CKEDITOR.instances[id].setData(html);
    }
  };

  // activate syntax checks
  Cms_Form.syntaxChecks = {};
  Cms_Form.addSyntaxCheck = function (id, check) {
    Cms_Form.syntaxChecks[id] = check;
  };
  Cms_Form.activateSyntaxChecks = function () {
    Syntax_Checker.resetChecks();
    $.each(Cms_Form.syntaxChecks, function(id, check) {
      var ele = $('#' + id)[0];
      if (ele && $(ele).is(':visible')) {
        Syntax_Checker.addCheck(id, check);
      }
    });
  };
  Cms_Form.afterSyntaxCheck = function () {
    // emptyAttributesCheck
    $("[data-check-presence]").each(function () {
      var attr = $(this).attr("data-check-presence");
      if(attr && !$(this).val()) {
        var id = null;

        id = $(this).closest(".column-value").attr("id");
        id = id || $(this).closest(".addon-view").attr("id");

        Syntax_Checker.errors.push(
          {
            id: id,
            idx: 0,
            code: attr,
            msg: (attr + '<%= I18n.t("errors.messages.blank") %>'),
            ele: this
          }
        );
      }
    });

    var h = [], ids = [], code, id, errorIdx, ref, i, j;
    $("#addon-cms-agents-addons-form-page .column-value-cms-column-headline").each(function () {
      ids.push($(this).attr("id"));
      h.push($(this).find('[name="item[column_values][][in_wrap][head]"]').val());
    });

    // orderOfH
    errorIdx = [];
    if (h.length) {
      for (i = j = 0, ref = h.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (i === 0) {
          if (!/h[12]/i.test(h[i])) {
            errorIdx.push(i);
          }
        } else {
          if (/h3/i.test(h[i])) {
            if (!/h[234]/i.test(h[i - 1])) {
              errorIdx.push(i);
            }
          } else if (/h4/i.test(h[i])) {
            if (!/h[34]/i.test(h[i - 1])) {
              errorIdx.push(i);
            }
          }
        }
      }
    }

    for (i = 0; i < errorIdx.length; i++) {
      var idx = errorIdx[i];
      Syntax_Checker.errors.push(
        {
          id: ids[idx],
          idx: 0,
          code: h[idx],
          msg: Syntax_Checker.message["invalidOrderOfH"],
          detail: Syntax_Checker.detail["invalidOrderOfH"]
        }
      );
    }
  };

  // get page html (use in Mobile_Size_Checker at Form_Alert)
  Cms_Form.form_html_path = null;
  Cms_Form.form_link_check_path = null;
  Cms_Form.getHtml = function (resolve, reject) {
    if ([".mod-cms-body", ".mod-body-part-html"].includes(Cms_Form.addonSelector)) {
      resolve(Cms_Form.getEditorHtml());
      return;
    }

    if (! Cms_Form.form_html_path) {
      if (reject) {
        reject(null, null, "form html path is not configured");
      }
      return;
    }

    var formData = Cms_Form.getFormData($("#" + Form_Preview.form_id));
    formData.append("route", Form_Preview.page_route);

    $.ajax({
      type: "POST",
      url: Cms_Form.form_html_path,
      data: formData,
      processData: false,
      contentType: false,
      cache: false,
      success: function(html) { resolve("<div>" + html + "</div>") },
      error: function(xhr, status, error) {
        if (reject) {
          reject(xhr, status, error);
        }
      }
    });
  };
  Cms_Form.getFormData = function($form, options) {
    if (!options) {
      options = {};
    }

    var formData = new FormData();
    $.each($form.serializeArray(), function() {
      if (!options.preserveMethod && this.name === "_method") {
        return;
      }

      formData.append(this.name, this.value);
    });
    return formData;
  };

  return Cms_Form;
})();
