class @Cms_Form
  @render: ->
    #$(window).load ->
    Syntax_Checker.render()
    Link_Checker.render()

    Form_Alert.addValidation(Form_Alert.clonedName)
    Form_Alert.addValidation(Form_Alert.presence)
    Form_Alert.addValidation(Syntax_Checker.validateHtml)

    if Syntax_Checker.autoCorrect
      Form_Alert.addBeforeSave(Syntax_Checker.correctAll)
    Form_Alert.render()
    Form_Preview.render()

  @addonSelector = ".mod-cms-body"
  @editorId      = "item_html"
  @getEditorHtml: (id = null) ->
    id ||= Cms_Form.editorId

    if (typeof tinymce != 'undefined')
      html = "<div>" + tinymce.get(id).getContent() + "</div>"
    else if (typeof CKEDITOR != 'undefined')
      html = "<div>" + CKEDITOR.instances[id].getData() + "</div>"
    else
      html = ""
    return html

  @setEditorHtml: (html, id = null)->
    id ||= Cms_Form.editorId

    if (typeof tinymce != 'undefined')
      tinymce.get(id).setContent(html)
    else if (typeof CKEDITOR != 'undefined')
      CKEDITOR.instances[id].setData(html)

class @Syntax_Checker
  @message = {
    notSetImgAlt       : "<%= I18n.t('errors.messages.set_img_alt') %>"
    invalidImgScheme   : "<%= I18n.t('errors.messages.invalid_img_scheme') %>"
    notSetTableCaption : "<%= I18n.t('errors.messages.set_table_caption') %>"
    notSetThScope      : "<%= I18n.t('errors.messages.set_th_scope') %>"
    invalidOrderOfH    : "<%= I18n.t('errors.messages.invalid_order_of_h') %>"
    invalidMultibyteCharacter : "<%= I18n.t('errors.messages.invalid_multibyte_character') %>"
    invalidDependentCharacter : "<%= I18n.t('errors.messages.invalid_dependent_character') %>"
    invalidDateFormat : "<%= I18n.t('errors.messages.invalid_date_format') %>"
    invalidAdjacentA : "<%= I18n.t('errors.messages.invalid_adjacent_a') %>"
    checkInterwordSpace : "<%= I18n.t('errors.messages.check_interword_space') %>"
    checkLinkText : "<%= I18n.t('errors.messages.check_link_text') %>"
    checkEmbeddedMedia : "<%= I18n.t('errors.messages.check_embedded_media') %>"
  }

  @detail = {
    notSetImgAlt       : <%= I18n.t('errors.messages.syntax_check_detail.set_img_alt').to_json %>
    invalidImgScheme   : <%= I18n.t('errors.messages.syntax_check_detail.invalid_img_scheme').to_json %>
    notSetTableCaption : <%= I18n.t('errors.messages.syntax_check_detail.set_table_caption').to_json %>
    notSetThScope      : <%= I18n.t('errors.messages.syntax_check_detail.set_th_scope').to_json %>
    invalidOrderOfH    : <%= I18n.t('errors.messages.syntax_check_detail.invalid_order_of_h').to_json %>
    invalidMultibyteCharacter : <%= I18n.t('errors.messages.syntax_check_detail.invalid_multibyte_character').to_json %>
    invalidDependentCharacter : <%= I18n.t('errors.messages.syntax_check_detail.invalid_dependent_character').to_json %>
    invalidDateFormat : <%= I18n.t('errors.messages.syntax_check_detail.invalid_date_format').to_json %>
    invalidAdjacentA : <%= I18n.t('errors.messages.syntax_check_detail.invalid_adjacent_a').to_json %>
    checkInterwordSpace : <%= I18n.t('errors.messages.syntax_check_detail.check_interword_space').to_json %>
    checkLinkText : <%= I18n.t('errors.messages.syntax_check_detail.check_link_text').to_json %>
    checkEmbeddedMedia : <%= I18n.t('errors.messages.syntax_check_detail.check_embedded_media').to_json %>
  }

  @dependentCharacter = "<%= I18n.t('dependent_character').join %>"
  @mediaExtensions = [
    "aac" , "aif", "aiff", "au" , "avi", "flac", "flv", "mid",
    "midi", "mp3", "m4a" , "mp4", "mpg", "mpeg", "oga", "ogg",
    "tta" , "vdo", "wav" , "wma", "wmv"
  ]

  @errors
  @errorCount
  @autoCorrect = false

  @reset: ()->
    @errors = {}
    @errorCount = 0
    $("#errorSyntaxChecker").remove()
    return

  @render: ()->
    $("button.syntax-check").on "click", ->
      Syntax_Checker.check()

  @check: (opts={})->
    Syntax_Checker.reset()
    html = Cms_Form.getEditorHtml()

    Syntax_Checker.checkTable              html
    Syntax_Checker.checkMultibyteCharacter html
    Syntax_Checker.checkDependentCharacter html
    Syntax_Checker.checkDateFormat         html
    Syntax_Checker.checkAdjacentA          html
    Syntax_Checker.checkOrderOfH           html
    Syntax_Checker.checkImgAlt             html
    Syntax_Checker.checkImgDataUriScheme   html
    Syntax_Checker.checkInterwordSpace     html
    Syntax_Checker.checkLinkText           html
    Syntax_Checker.checkEmbeddedMedia      html

    $('#errorSyntaxChecker').remove()

    result = $("<div>")
    result.attr('id', 'errorSyntaxChecker')
    result.attr('class', 'errorExplanation')
    result.append("<h2>" + "<%= I18n.t('cms.syntax_check') %>" + "</h2>")

    if Syntax_Checker.errorCount > 0
      result.append("<p>" + "<%= I18n.t('errors.template.body') %>" + "</p>")
      result.append('<ul>')
      ul = result.find('ul:last')
      Syntax_Checker.appendMessage(ul, Syntax_Checker.errors)
      $(Cms_Form.addonSelector).find("dd:last").after(result)
      SS_Tooltips.render(".detail")
      return false
    else
      result.append("<p>" + "<%= I18n.t('errors.template.no_errors') %>" + "</p>")
      $(Cms_Form.addonSelector).find("dd:last").after(result)
      return true

  @validateHtml: (form, submit)->
    unless Syntax_Checker.check()
      for key, errors of Syntax_Checker.errors
        for error, i in errors
          if error["correct"] && Syntax_Checker.autoCorrect
            Form_Alert.add "<%= I18n.t('cms.auto_correct.notice') %>", this, error["msg"]
          else
            Form_Alert.add "<%= I18n.t('cms.syntax_check') %>", this, error["msg"]

  @correctAll: (form, submit)->
    html = Cms_Form.getEditorHtml()

    html = Syntax_Checker.correctMultibyteCharacter(html)
    html = Syntax_Checker.correctDependentCharacter("<div>" + html + "</div>")
    html = Syntax_Checker.correctDateFormat("<div>" + html + "</div>")

    if $("<div>" + html + "</div>").find("table").length
      html = Syntax_Checker.correctTableCaption($("<div>" + html + "</div>").find("table"))
      html = Syntax_Checker.correctTableScope($("<div>" + html + "</div>").find("table"))

    if $("<div>" + html + "</div>").find("h1,h2,h3,h4,h5,h6").length
      html = Syntax_Checker.correctOrderOfH("<div>" + html + "</div>")

    if $("<div>" + html + "</div>").find("a[href]").length
      html = Syntax_Checker.correctAdjacentA($("<div>" + html + "</div>").find("a[href]"))

    Cms_Form.setEditorHtml(html)

  @pushError: (errors) ->
    key = Syntax_Checker.errorCount
    Syntax_Checker.errors[key] = errors
    Syntax_Checker.errorCount += 1
    return key

  @isValidDate: (date)->
    return false  if Object::toString.call(date) isnt "[object Date]"
    if not isNaN(date.getTime()) and date.getYear() > 0
      return true
    else
      return false

  @justText: (ele)->
    $(ele).clone().children().remove().end().text()

  @outerHtmlSummary: (ele)->
    $(ele).get(0).outerHTML.replace(/[\r\n]|&nbsp;/g, "")

  @appendMessage: (ul, errorHash)->
    for key, errors of errorHash
      ul.append('<li class="code">')
      ul.find('li:last').append('<code>')
      ul.append('<ul>')
      for error, i in errors
        ul.find('li:last code').text(error["code"])
        ul.find('> ul:last').append('<li>')
        li = ul.find('> ul:last li:last')

        message = $('<span class="message detail">' + error["msg"] + '</span>')
        if error["detail"]
          detail = $('<ul>').appendTo(message)
          $.each error["detail"], ->
            detail.append("<li>" + this + "</li>")
            detail.hide()
        li.append(message)

        if error["correct"] && error["ele"]
          correct = $('<a href="#" class="correct">' + "<%= I18n.t('cms.auto_correct.link') %>" + '</a>')
          correct.on "click", {error: error}, (e)->
            html = e.data.error["correct"](e.data.error["ele"])
            Cms_Form.setEditorHtml(html)
            $(Cms_Form.addonSelector).find("button.syntax-check").trigger("click")
            return false
          li.append(correct)

  @checkImgAlt: (html)->
    $(html).find('img').each ->
      alt = $(this).attr('alt')
      if !alt || $.trim(alt) == "" || /^[\w\s\.\-]*$/.test(alt)
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this)
          msg:  Syntax_Checker.message["notSetImgAlt"]
          detail: Syntax_Checker.detail["notSetImgAlt"]
          ele: this
        }]
        Syntax_Checker.pushError(errors)

  @checkImgDataUriScheme: (html)->
    $(html).find('img[src]').each ->
      src = $(this).attr('src')
      if /^data:.*?,.*?$/.test(src)
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this)
          msg:  Syntax_Checker.message["invalidImgScheme"]
          detail: Syntax_Checker.detail["invalidImgScheme"]
          ele: this
        }]
        Syntax_Checker.pushError(errors)

  @checkTable: (html)->
    $(html).find("table").each ->
      table = this
      caption = $(this).find('caption')
      errors = []

      if !caption || $.trim(caption.text()) == ""
        errors.push({
          code: Syntax_Checker.outerHtmlSummary(table)
          msg:  Syntax_Checker.message["notSetTableCaption"]
          detail: Syntax_Checker.detail["notSetTableCaption"]
          ele: table
          correct: Syntax_Checker.correctTableCaption
        })

      $(table).find('th').each ->
        unless $(this).attr("scope")
          errors.push({
            code: Syntax_Checker.outerHtmlSummary(table)
            msg:  Syntax_Checker.message["notSetThScope"]
            detail: Syntax_Checker.detail["notSetThScope"]
            ele: table
            correct: Syntax_Checker.correctTableScope
          })
          return false

      Syntax_Checker.pushError(errors) unless $.isEmptyObject(errors)

  @correctTableCaption: (table)->
    $(table).find('caption').remove()
    $(table).prepend('<caption>' + "<%= I18n.t('cms.auto_correct.caption') %>" + '</caption>')
    return  $(table).parents().last().html() || $(table).html()

  @correctTableScope: (table)->
    if $(table).find("tr:first th").length == 1
      scope = "row"
    else
      scope = "col"

    $(table).find("tr:first th").each ->
      $(this).attr("scope", scope) unless $(this).attr("scope")
    $(table).find("tr:not(:first) th").each ->
      $(this).attr("scope", "row") unless $(this).attr("scope")
    return  $(table).parents().last().html() || $(table).html()

  @checkOrderOfH: (html)->
    h = $(html).find("h1,h2,h3,h4,h5,h6")
    return unless h.length

    code = ""
    for i in [0..h.length-1]
      if i == 0
        unless /h[12]/i.test h[i].tagName
          code += h[i].tagName + " "
      else
        if /h3/i.test h[i].tagName
          unless /h[23456]/i.test h[i-1].tagName
            code += h[i].tagName + " "

        else if /h4/i.test h[i].tagName
          unless /h[3456]/i.test h[i-1].tagName
            code += h[i].tagName + " "

        else if /h5/i.test h[i].tagName
          unless /h[456]/i.test h[i-1].tagName
            code += h[i].tagName + " "

        else if /h6/i.test h[i].tagName
          unless /h[56]/i.test h[i-1].tagName
            code += h[i].tagName + " "

    if code != ""
      errors = [{
        code: code
        msg: Syntax_Checker.message["invalidOrderOfH"]
        ele: html
        detail: Syntax_Checker.detail["invalidOrderOfH"]
        correct: Syntax_Checker.correctOrderOfH
      }]
      Syntax_Checker.pushError(errors)
    return

  @correctOrderOfH: (html)->
    h = $(html).find("h1,h2,h3,h4,h5,h6")
    return $(html).parents().last().html() unless h.length
    replace = html

    for i in [0..h.length-1]
      if i == 0
        unless /h[12]/i.test h[i].tagName
          replace = $('<h1>' + $(h[i]).html() + '</h1>')
          $(h[i]).after(replace).remove()
          h[i] = replace[0]
      else
        if /h3/i.test h[i].tagName
          unless /h[23456]/i.test h[i-1].tagName
            replace = $('<' + h[i-1].tagName.replace("1","2") + '>')
            replace.html($(h[i]).html())
            $(h[i]).after(replace).remove()
            h[i] = replace[0]

        else if /h4/i.test h[i].tagName
          unless /h[3456]/i.test h[i-1].tagName
            replace = $('<' + h[i-1].tagName.replace("1","2") + '>')
            replace.html($(h[i]).html())
            $(h[i]).after(replace).remove()
            h[i] = replace[0]

        else if /h5/i.test h[i].tagName
          unless /h[456]/i.test h[i-1].tagName
            replace = $('<' + h[i-1].tagName.replace("1","2") + '>')
            replace.html($(h[i]).html())
            $(h[i]).after(replace).remove()
            h[i] = replace[0]

        else if /h6/i.test h[i].tagName
          unless /h[56]/i.test h[i-1].tagName
            replace = $('<' + h[i-1].tagName.replace("1","2") + '>')
            replace.html($(h[i]).html())
            $(h[i]).after(replace).remove()
            h[i] = replace[0]

    return $(replace).parents().last().html() || $(replace).html()

  @checkMultibyteCharacter: (html)->
    chars = []
    $(html).find(":not(iframe)").addBack().contents().filter ->
      return this.nodeType == 3
    .each ->
      c = this.textContent.match /[Ａ-Ｚａ-ｚ０-９]/g
      chars.push c if c
    unless $.isEmptyObject(chars)
      errors = [{
        code: chars.join(",")
        msg: Syntax_Checker.message["invalidMultibyteCharacter"]
        detail: Syntax_Checker.detail["invalidMultibyteCharacter"]
        ele: html
        correct: Syntax_Checker.correctMultibyteCharacter
      }]
      Syntax_Checker.pushError(errors)

  @correctMultibyteCharacter: (html)->
    ret = $(html)
    ret.find(":not(iframe)").addBack().contents().filter ->
      return this.nodeType == 3
    .each ->
      text = this.textContent.replace /[Ａ-Ｚａ-ｚ０-９]/g, (c)->
        String.fromCharCode(c.charCodeAt(0) - 0xFEE0);
      this.textContent = text
    return ret.html()

  @checkDependentCharacter: (html)->
    regex = new RegExp("[" + Syntax_Checker.dependentCharacter + "]","g")
    c = html.match(regex)
    unless $.isEmptyObject(c)
      errors = [{
        code: c.join(",")
        msg: Syntax_Checker.message["invalidDependentCharacter"]
        detail: Syntax_Checker.detail["invalidDependentCharacter"]
        ele: html
        correct: Syntax_Checker.correctDependentCharacter
      }]
      Syntax_Checker.pushError(errors)

  @correctDependentCharacter: (html)->
    regex = new RegExp("[" + Syntax_Checker.dependentCharacter + "]","g")
    html = html.replace regex, (c)->
      "<%= I18n.t('cms.auto_correct.dependent_character') %>"
    return $(html).html()

  @checkDateFormat: (html)->
    dates = html.match(/[^\d-]\d{4}[ \　\.\-\/]\d{1,2}[ \　\.\-\/]\d{1,2}[^\d-]/g)
    return unless dates

    dates = $.map dates, (date)->
      return date.substr(1,date.length-2)

    dates = $.grep dates, (date)->
      return Syntax_Checker.isValidDate(new Date(date))

    unless $.isEmptyObject(dates)
      errors = [{
        code: dates.join(",")
        msg: Syntax_Checker.message["invalidDateFormat"]
        detail: Syntax_Checker.detail["invalidDateFormat"]
        ele: html
        correct: Syntax_Checker.correctDateFormat
      }]
      Syntax_Checker.pushError(errors)

  @correctDateFormat: (html)->
    html = html.replace /([^\d-])(\d{4})[ \　\.\-\/](\d{1,2})[ \　\.\-\/](\d{1,2})([^\d-])/g, (date,head,y,m,d,tail)->
      if Syntax_Checker.isValidDate(new Date([y,m,d].join(" ")))
        head +
        y + "<%= I18n.t("datetime.prompts.year") %>" +
        m + "<%= I18n.t("datetime.prompts.month") %>" +
        d + "<%= I18n.t("datetime.prompts.day") %>" +
        tail
      else
        date
    return $(html).html()

  @checkAdjacentA: (html)->
    $(html).find("a[href]").each ->
      next = $(this).next('a[href="' + $(this).attr("href") + '"]')
      if next.length
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this) + Syntax_Checker.outerHtmlSummary(next)
          msg: Syntax_Checker.message["invalidAdjacentA"]
          detail: Syntax_Checker.detail["invalidAdjacentA"]
          ele: this
          correct: Syntax_Checker.correctAdjacentA
        }]
        Syntax_Checker.pushError(errors)

  @correctAdjacentA: (a)->
    next = $(a).next('a[href="' + $(a).attr("href") + '"]')
    if next.length
      $(a).html($(a).html() + $(next).html()) if $(a).html() != $(next).html()
      next.remove()

    return $(a).parents().last().html() || $(a).html()

  @checkInterwordSpace: (html)->
    $(html).find(":not(iframe)").each ->
      text = $.trim(Syntax_Checker.justText(this))
      if /[　]/.test(text)
        for i in [0..text.length-1]
          if text.charCodeAt(i) >= 256
            errors = [{
              code: text
              msg: Syntax_Checker.message["checkInterwordSpace"]
              detail: Syntax_Checker.detail["checkInterwordSpace"]
            }]
            Syntax_Checker.pushError(errors)
            break

  @checkLinkText: (html)->
    $(html).find("a[href]").each ->
      text = $(this).text()
      if text.length <= 3
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this)
          msg: Syntax_Checker.message["checkLinkText"]
          detail: Syntax_Checker.detail["checkLinkText"]
        }]
        Syntax_Checker.pushError(errors)

  @checkEmbeddedMedia: (html)->
    $(html).find("embed,video").each ()->
      errors = [{
        code: this
        msg: Syntax_Checker.message["checkEmbeddedMedia"]
        detail: Syntax_Checker.detail["checkEmbeddedMedia"]
      }]
      Syntax_Checker.pushError(errors)

    regExt = new RegExp("(" + Syntax_Checker.mediaExtensions.join("|") + ")","i")
    regSite = /https?:\/\/www\.youtube\.com\//

    $(html).find("iframe[src]").each ()->
      src = $(this).attr("src")
      ext = src.replace(/\?.*$/, "").replace( /.*\//, '' ).split(".").pop()
      if regExt.test(ext) || regSite.test(src)
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this)
          msg: Syntax_Checker.message["checkEmbeddedMedia"]
          detail: Syntax_Checker.detail["checkEmbeddedMedia"]
        }]
        Syntax_Checker.pushError(errors)

    $(html).find("a[href]").each ()->
      href = $(this).attr("href")
      ext = href.replace(/\?.*$/, "").replace( /.*\//, '' ).split(".").pop()
      if regExt.test(ext) || regSite.test(href)
        errors = [{
          code: Syntax_Checker.outerHtmlSummary(this)
          msg: Syntax_Checker.message["checkEmbeddedMedia"]
          detail: Syntax_Checker.detail["checkEmbeddedMedia"]
        }]
        Syntax_Checker.pushError(errors)

class @Link_Checker
  @message = {
    header            : "<%= I18n.t('cms.link_check') %>"
    noLinks           : "<%= I18n.t('errors.template.no_links') %>"
    checkLinks        : "<%= I18n.t('errors.template.check_links') %>"

    success           : "<%= I18n.t('errors.messages.link_check_success') %>"
    failure           : "<%= I18n.t('errors.messages.link_check_failure') %>"
    linkCheckerError  : "<%= I18n.t('errors.messages.link_check_failed_to_connect') %>"
  }

  @links   = {}
  @error   = ""
  @url     = "/.cms/link_check/check.json"
  @rootUrl = ""

  @render: ()->
    $("button.link-check").on "click", ->
      $.support.cors = true
      button = this
      $(button).attr('disabled', true)
      Link_Checker.reset()
      html = Cms_Form.getEditorHtml()

      Link_Checker.check html, ()->
        result = $("<div>")
        result.attr('id', 'errorLinkChecker')
        result.attr('class', 'errorExplanation')
        result.append("<h2>" + Link_Checker.message["header"] + "</h2>")

        if Link_Checker.error != ""
          result.append(Link_Checker.error)
        else
          result.append("<p>" + Link_Checker.message["checkLinks"] + "</p>")
          result.append('<ul>')
          ul = result.find('ul')
          for link, msg of Link_Checker.links
            ul.append('<li>')
            ul.find('li:last').append(msg)

        $(Cms_Form.addonSelector).find("#errorLinkChecker").remove()
        $(Cms_Form.addonSelector).append(result)
        $(button).removeAttr('disabled')
        return
      return

  @reset: ()->
    $("#errorLinkChecker").remove()
    @links = {}
    @error = ""
    return

  @addMessage: (link, state)->
    if state
      msg = '<span class="success">' + Link_Checker.message["success"] + '</span>'
      Link_Checker.links[link] = link + " " + msg
    else
      msg = '<span class="failure">' + Link_Checker.message["failure"] + '</span>'
      Link_Checker.links[link] = link + " " + msg

  @check: (html, complete)->
    numOfLinks = $(html).find('a[href]').length
    if numOfLinks == 0
      Link_Checker.error = "<p>" + Link_Checker.message["noLinks"] + "</p>"
      complete()
      return

    links = []
    for href in $(html).find('a[href]')
      link = $(href).attr('href')
      continue if link == "#"

      if link[0] == "#"
        Link_Checker.addMessage(link, $(html).find(link).length != 0)
      else
        link = Link_Checker.rootUrl + link.slice(1) if /^\//.test(link)
        links.push(link)

    $.ajax {
      type: "POST", url: Link_Checker.url, cache: false,
      data: JSON.stringify({"url" : links}),
      contentType: 'application/json',
      dataType: "json",
      crossDomain: true,
      success: (res, status) ->
        for link, code of res
          Link_Checker.addMessage(link, (code == 200))
        return
      error: (xhr, status, error) ->
        Link_Checker.error = "<p>" + Link_Checker.message["linkCheckerError"] + ": " + Link_Checker.url + "</p>"
        return
      complete: (xhr, status) ->
        complete()
        return
    }
    return

class @Form_Alert
  @alerts = []
  @validations = []
  @beforeSaves = []

  @render: ()->
    $("input:submit").on "click.form_alert", (e)->
      submit = this
      form   = $(submit).closest("form")

      unless Form_Alert.validate(form, submit)
        div = $('<div id="alertExplanation" class="errorExplanation">')
        div.append("<h2><%= I18n.t('cms.alert') %></h2>")
        for addon, fields of Form_Alert.alerts
          div.append('<p>' + addon + '</p>')
          ul = $("<ul>").appendTo(div)
          for field, i in fields
            ul.append('<li>' + field["msg"] + '</li>')

        # caution: below IE8, you must use document.createElement() method to create <footer>
        footer = $(document.createElement("footer")).addClass('send')
        footer.append('<button name="button" type="button" class="btn-primary save"><%= I18n.t('views.button.ignore_alert') %></button>')
        footer.append('<button name="button" type="button" class="btn-default cancel"><%= I18n.t('views.button.cancel') %></button>')

        $.colorbox(
          html: div.get(0).outerHTML + footer.get(0).outerHTML,
          maxHeight: "80%",
          fixed: true
        )

        $("#cboxLoadedContent").find(".save").on "click", {submit: submit}, ()->
          Form_Alert.runBeforeSave(form, submit)
          $(submit).off(".form_alert")
          $(submit).trigger("click")

        $("#cboxLoadedContent").find(".cancel").on "click", (e)->
          $.colorbox.close()
          return false
        return false

  @validate: (form, submit)->
    Form_Alert.alerts = {}
    $.each Form_Alert.validations, ->
      (this)(form, submit)

    if $.isEmptyObject(Form_Alert.alerts)
      return true
    else
      return false

  @addValidation: (validate)->
    Form_Alert.validations.push(validate)

  @runBeforeSave: (form, submit)->
    $.each Form_Alert.beforeSaves, ->
      (this)(form, submit)

  @addBeforeSave: (callback)->
    Form_Alert.beforeSaves.push(callback)

  @presence: (form, submit)->
    $(form).find("input.presence,textarea.presence").each ->
      if $(this).val() == ""
        $(this).closest("dl").show()
        addonName = $(this).closest(".addon-view").find("header").text()
        fieldName = Form_Alert.justText($(this).closest("dd").prev("dt"))
        Form_Alert.add addonName, this, fieldName + "<%= I18n.t('errors.messages.blank') %>"

  @clonedName: (form, submit)->
    name = $(form).find("#addon-basic #item_name")
    if $(submit).hasClass("publish_save") && /^\[<%= I18n.t('workflow.cloned_name_prefix') %>\]/.test($(name).val())
      addonName = $(name).closest(".addon-view").find("header").text()
      fieldName = Form_Alert.justText($(name).closest("dd").prev("dt"))
      Form_Alert.add addonName, name, "<%= I18n.t('errors.messages.cloned_name') %>"

  @add: (addon, ele, msg)->
    Form_Alert.alerts[addon] ||= []
    Form_Alert.alerts[addon].push(
      "ele" : ele
      "msg" : msg
    )

  @justText: (ele)->
    $(ele).clone().children().remove().end().text()

class @Form_Preview
  @form_preview_path
  @page_route

  @render: ->
    $("button.preview").on "click", (e) ->
      name = $("#item-form input[name='item[name]']").val()
      basename = $("#item-form input[name='item[basename]']").val()
      errors = []

      errors.push "<%= I18n.t('errors.messages.set_name') %>" unless name
      errors.push "<%= I18n.t('errors.messages.set_filename') %>" unless basename
      unless $.isEmptyObject(errors)
        alert(errors.join("\n"))
        return false

      form = $("<form>")
      $(form).attr("method", "post")
      $(form).attr("action", Form_Preview.form_preview_path)
      $(form).attr("target", "FormPreview")

      for i, v of $("#item-form").serializeArray()
        continue unless /^item\[/.test(v["name"])
        continue if "item[html]" == v["name"]
        continue if "item[body_parts][]" == v["name"]
        form.append($("<input/>", name: v["name"].replace(/^item\[/, "preview_item["), value: v["value"], type: "hidden" ))

      $("textarea[id^=item_html_part_]").each ()->
        id = $(this).attr("id")
        name = $(this).attr("name").replace(/^item\[/, "preview_item[")
        form.append($("<input/>", name: name, value: Cms_Form.getEditorHtml(id), type: "hidden" ))

      form.append($("<input/>", name: "preview_item[route]", value: Form_Preview.page_route, type: "hidden" ))
      form.append($("<input/>", name: "preview_item[html]", value: Cms_Form.getEditorHtml("item_html"), type: "hidden" ))

      width = $(window).width()
      height = $(window).height()
      window.open("about:blank", "FormPreview", "width=#{width},height=#{height},resizable=yes,scrollbars=yes")
      form.appendTo("body")
      form.submit()
      return false
