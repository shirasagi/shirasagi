//= require jquery3
//= require jquery-migrate/src/migratemute.js
//= require jquery-migrate/dist/jquery-migrate.js
//= require jquery_ujs
//= require js.cookie
//= require jquery.form
//= require jquery-datetimepicker/build/jquery.datetimepicker.full.js
//= require crypto-js/crypto-js.js
//= require gmaps-marker-clusterer/src/markerclusterer.js
//= require ss/lib/base
//= require_self
//= require ss/lib/font
//= require ss/lib/module
//= require ss/lib/mobile
//= require ss/lib/clipboard
//= require ss/lib/file_view
//= require ss/lib/date_time_picker
//= require cms/lib/site_search
//= require cms/lib/site_search_history
//= require cms/lib/line
//= require cms/lib/history
//= require ss/lib/search_ui
//= require ss/lib/ajax_file
//= require chat/lib/bot
//= require cms/lib/editor
//= require ads/lib/banner
//= require event/lib/monthly
//= require event/lib/calendar
//= require inquiry/lib/form
//= require key_visual/lib/slide
//= require key_visual/lib/swiper_slide
//= require map/googlemaps/map
//= require map/googlemaps/facility/search
//= require map/googlemaps/member/photo/form
//= require map/openlayers/map
//= require map/openlayers/facility/search
//= require map/openlayers/member/photo/form
//= require map/openlayers/opendata/dataset_map
//= require opendata/graph
//= require opendata/dataset_graph

SS.ready(function () {
  SS_Kana.render();
  SS_Translate.render();
  SS_Font.render();
  SS_AdobeReader.render();
  SS_Mobile.render();
  SS_Voice.render();
  SS_Theme.render();
  SS.renderAjaxBox();
  SS.part = $(".ss-part").length;
  if (SS.part === 0) {
    SS_Recommend.render();
  }
  $(".ss-part").each(function () {
    SS.renderPart($(this));
  });
  SS_DateTimePicker.render();
  SS_SearchUI.render();
  SS.enableDoubleClickGuard();
  SS_Print.render();
  SS_ClipboardCopy.render();
});

this.SS_Kana = (function () {
  function SS_Kana() {
  }

  SS_Kana.dir = <%= SS.config.kana.location.to_json %>;

  SS_Kana.siteUrl = "/";

  SS_Kana.kanaUrl = <%= SS.config.kana.location.to_json %> + "/";

  SS_Kana.render = function () {
    var $kana = $("#ss-kana");
    if (!$kana[0]) {
      return;
    }

    if (SS.config["site_url"] && SS.config["kana_url"]) {
      SS_Kana.siteUrl = SS.config["site_url"];
      SS_Kana.kanaUrl = SS.config["kana_url"];
    }

    var pathname = location.pathname;
    var url, cssClass;
    if ($("body").data("kana")) {
      url = SS_Kana.url(pathname, false);
      url = SS_Translate.url(url);
      cssClass = "off";
    } else {
      url = SS_Translate.url(pathname, false)
      url = SS_Kana.url(url, true);
      cssClass = "on";
    }
    if (url[0] !== '/') {
      // "javascript:alert('xss')" のような URL を location.href にセットしてしまうと xss とダイアログが表示されてしまう。
      // 先頭が "/" かどうかをチェックすることで、この種の脆弱性を防ぐ。
      return;
    }

    var html = $kana.html();
    var $anchor = $("<a />", { class: cssClass, href: "#" + url, rel: "nofollow" }).html(html)
    $kana.html($anchor);

    $anchor.on("click", function(ev) {
      ev.preventDefault();
      location.href = url;
      return false;
    });
  };

  SS_Kana.url = function (url, bool) {
    if (bool == null) {
      bool = null;
    }
    if (bool === null) {
      bool = $("body").data("kana");
    }
    if (bool) {
      url = url.replace(RegExp("^(\\/\\.s\\d+?\\/preview\\d*)?" + this.siteUrl), "$1" + this.kanaUrl);
    } else {
      url = url.replace(RegExp("^(\\/\\.s\\d+?\\/preview\\d*)?" + this.kanaUrl), "$1" + this.siteUrl);
    }
    return url;
  };

  SS_Kana.loadPage = function (elem) {
    $.ajax({
      type: "GET",
      url: elem.attr("href"),
      dataType: "html",
      success: function (data) {
        var body;
        body = $("body");
        body.data("kana", elem.hasClass("on"));
        return body.html(data.replace(/[\s\S]*<body.*?>([\s\S]*)<\/body>[\s\S]*/, "$1"));
      }
    });
    return false;
  };

  return SS_Kana;

})();

this.SS_Translate = (function () {
  function SS_Translate() {
  }

  SS_Translate.dir = <%= SS.config.translate.location.to_json %>;

  SS_Translate.siteUrl = "/";

  SS_Translate.translateUrl = <%= SS.config.translate.location.to_json %> + "/";

  SS_Translate.url = function (url, target) {
    if (target) {
      var targetUrl = this.translateUrl + target + "/";
      url = url.replace(RegExp("^(\\/\\.s\\d+?\\/preview\\d*)?" + this.siteUrl), "$1" + targetUrl);
    } else {
      var targetUrl = this.translateUrl + $("body").data("translate") + "/";
      url = url.replace(RegExp("^(\\/\\.s\\d+?\\/preview\\d*)?" + targetUrl), "$1" + this.siteUrl);
    }
    return url;
  };

  SS_Translate.render = function () {
    if (SS.config["site_url"] && SS.config["translate_url"]) {
      SS_Translate.siteUrl = SS.config["site_url"];
      SS_Translate.translateUrl = SS.config["translate_url"];
    }
  };

  return SS_Translate;

})();

this.SS_Theme = (function () {
  function SS_Theme() {
  }

  SS_Theme.render = function () {
    var $theme = $("#ss-theme");
    if ($theme.length === 0) {
      return;
    }

    var theme = SS.config["theme"];
    var inlineStyle = '';
    for (var cls in theme) {
      var $a = $theme.find("a." + $.escapeSelector(cls));
      if (!$a[0]) {
        continue;
      }

      $a.attr("data-ss-theme", cls);

      var v = theme[cls];
      if (v["css_path"]) {
        var $styleSheetLink = $('<link />', { rel: "alternate stylesheet", type: "text/css", title: v["name"], href: v["css_path"], class: "ss-theme " + $.escapeSelector(cls), disabled: true });
        $('head').append($styleSheetLink);
      }
      if (v["font_color"] && v["background_color"]) {
        inlineStyle += SS_Theme.cssTemplate(cls, v["font_color"], v["background_color"]) + "\n";
      }
      if (v["default_theme"]) {
        $theme.find('a').removeClass('active');
        $a.addClass('active');
        SS_Theme.switchTheme(cls);
      }
      $a.on("click", function () {
        var $this = $(this);
        var cls = $this.data("ss-theme");
        $theme.find('a').removeClass('active');
        $this.addClass('active');
        Cookies.set("ss-theme", cls, {
          expires: 7,
          path: '/'
        });
        SS_Theme.switchTheme(cls);
        return false;
      });
    }

    if (inlineStyle) {
      var $inlineStyle = $("<style />", { type: "text/css", class: "ss-theme" }).text(inlineStyle);
      $("head").append($inlineStyle);
    }

    var cls = Cookies.get("ss-theme");
    if (!theme[cls]) {
      Cookies.remove("ss-theme");
      cls = null;
    }
    if (cls) {
      $theme.find('a').removeClass('active');
      $theme.find('a[data-ss-theme="' + $.escapeSelector(cls) + '"]').addClass('active');
      SS_Theme.switchTheme(cls);
    }
  };

  SS_Theme.cssTemplate = function (cls, color, backgroundColor) {
    return "body[data-ss-theme=\"" + $.escapeSelector(cls) + "\"] * {\n  border-color: " + color + " !important;\n  background: " + backgroundColor + " !important;\n  color: " + color + " !important;\n}";
  };

  SS_Theme.switchTheme = function (cls) {
    $('head link.ss-theme').prop("disabled", true);
    $('head link.ss-theme.' + $.escapeSelector(cls)).prop("disabled", false);
    $("body").attr("data-ss-theme", "");
    $("body").attr("data-ss-theme", cls);
  };

  return SS_Theme;

})();

this.SS_AdobeReader = (function () {
  function SS_AdobeReader() {
  }

  SS_AdobeReader.render = function () {
    if ($("a[href$='.pdf']").length) {
      return $("#ss-adobe-reader, .ss-adobe-reader").each(function () {
        return $(this).html(<%= Array(I18n.t("cms.adobe_reader.remark")).join.to_json %>).show();
      });
    }
  };

  return SS_AdobeReader;

})();

this.SS_Tabs = (function () {
  function SS_Tabs() {
  }

  SS_Tabs.render = function (box) {
    var $box = $(box);
    var anchors = [];
    $box.find(".tab").each(function (index) {
      var $tab = $(this);
      var name = $tab.find('> header h2').text();
      var $nav = $tab.find('nav');
      var url = $nav.find(".more").attr("href");
      var altClass = $tab.attr('data-class');
      var baseId = $tab.attr("id");
      var nameId = baseId + "-name";
      var viewId = baseId + "-view";
      if (!url) {
        url = "#" + viewId;
      }
      var tabCls = index === 0 ? "name current" : "name";
      if (altClass) {
        tabCls = tabCls + " " + altClass;
      }

      var $anchor = $("<a />", { id: nameId, class: tabCls, href: url }).text(name);
      $anchor.on("click", function() {
        return SS_Tabs.select(box, "#" + nameId, "#" + viewId);
      });
      anchors.push($anchor);

      var bodyCls = 'view';
      if (altClass) {
        bodyCls = bodyCls + " " + altClass;
      }

      var $html = $("<article />", { id: viewId, class: bodyCls });
      if (index !== 0) {
        $html.css("display", "none")
      }
      $html.append($("<h2 />", { style: "display: none;" }).text(name));
      $html.append($("<div />", { class: "pages" }).html($tab.find(".pages").html()));
      if ($tab.find('nav').length) {
        $html.append($("<nav />").html($tab.find('nav').html()));
      }
      $box.append($html);
      $tab.remove();
    });

    $box.prepend($("<nav />", { class: 'names' }).html(anchors));
  };

  SS_Tabs.select = function (box, name, view) {
    $(box).find(".name").each(function () {
      return $(this).removeClass("current");
    });
    $(box).find(".view").each(function () {
      return $(this).hide();
    });
    $(name).addClass("current");
    $(view).show();
    return false;
  };

  return SS_Tabs;

})();

this.SS_Voice = (function () {
  function SS_Voice() {
  }

  SS_Voice.voiceConfig = {
    'location': <%= SS.config.voice.controller['location'].to_json %>,
    'loading-resource': <%= SS.config.voice.resource['loading'].to_json %>,
    'disabled-resource': <%= SS.config.voice.resource['disabled'].to_json %>,
    'overload-resource': <%= SS.config.voice.resource['overload'].to_json %>
  };

  SS_Voice.url = null;

  SS_Voice.$voiceTag = null;

  SS_Voice.voiceController = null;

  SS_Voice.state = null;

  SS_Voice.cancelLoading = null;

  SS_Voice.timerId = null;

  SS_Voice.render = function () {
    SS_Voice.url = SS_Voice.requestUrl();
    var $voiceTag = $('#ss-voice');
    if ($voiceTag.size() === 0) {
      return;
    }
    if ($voiceTag.size() > 1) {
      $voiceTag = $voiceTag.first();
    }
    var anchor = $('<a rel="nofollow"/>').attr('href', "#/voice/").html($voiceTag.html());
    $voiceTag.html('');
    anchor.appendTo($voiceTag);
    SS_Voice.$voiceTag = anchor;
    var voice_controller = $('#ss-voice-controller');
    if (voice_controller.size() === 0) {
      $voiceTag.after('<div id="ss-voice-controller" style="display: none;"/>');
      voice_controller = $('#ss-voice-controller');
    }
    SS_Voice.voiceController = new SS_VoiceController(voice_controller[0]);
    SS_Voice.state = null;
    SS_Voice.cancelLoading = false;
    SS_Voice.timerId = null;
    SS_Voice.init();
    voice_controller.find('.ss-jp-close').on('click', SS_Voice.cancel);
  };

  SS_Voice.init = function () {
    SS_Voice.state = 'init';
    SS_Voice.voiceController.stop();
    SS_Voice.setAction(SS_Voice.load);
    SS_Voice.cancelLoading = false;
    return false;
  };

  SS_Voice.setAction = function (action) {
    SS_Voice.$voiceTag.off('click');
    SS_Voice.$voiceTag.on('click', action);
  };

  SS_Voice.load = function (ev) {
    if (SS_Voice.cancelLoading) {
      if (ev) {
        ev.preventDefault();
      }
      return false;
    }

    $.ajax({
      type: 'HEAD',
      url: SS_Voice.url,
      cache: false,
      statusCode: {
        200: (function (_this) {
          return function () {
            return SS_Voice.playAudio();
          };
        })(this),
        202: (function (_this) {
          return function (data, status, xhr) {
            var retry_after;
            SS_Voice.renderLoading();
            retry_after = xhr.getResponseHeader('Retry-After');
            if (!retry_after) {
              retry_after = 5;
            }
            return SS_Voice.timerId = setTimeout(SS_Voice.load, retry_after * 1000);
          };
        })(this)
      },
      error: function (xhr, status, error) {
        return SS_Voice.renderError(xhr.status);
      }
    });

    if (ev) {
      ev.preventDefault();
    }
    return false;
  };

  SS_Voice.renderLoading = function () {
    var url;
    if (SS_Voice.state === 'loading') {
      return false;
    }
    url = SS_Voice.voiceConfig['loading-resource'];
    SS_Voice.state = 'loading';
    SS_Voice.setAction(SS_Voice.cancel);
    SS_Voice.voiceController.play(url);
    return false;
  };

  SS_Voice.renderError = function (status) {
    var url;
    if (SS_Voice.state === 'error') {
      return false;
    }
    if (SS_Voice.timerId >= 0) {
      clearTimeout(SS_Voice.timerId);
    }
    SS_Voice.timerId = -1;
    if (status === 429) {
      url = SS_Voice.voiceConfig['overload-resource'];
    } else {
      url = SS_Voice.voiceConfig['disabled-resource'];
    }
    SS_Voice.state = 'error';
    SS_Voice.setAction(SS_Voice.cancel);
    SS_Voice.voiceController.play(url);
    return false;
  };

  SS_Voice.cancel = function (ev) {
    SS_Voice.cancelLoading = true;
    if (SS_Voice.timerId !== null) {
      clearTimeout(SS_Voice.timerId);
    }
    SS_Voice.timerId = null;
    SS_Voice.init();

    ev.preventDefault();
    return false;
  };

  SS_Voice.playAudio = function () {
    SS_Voice.state = 'playing';
    SS_Voice.voiceController.play(SS_Voice.url);
    SS_Voice.setAction(SS_Voice.cancel);
    return false;
  };

  SS_Voice.requestUrl = function () {
    var path, url;
    path = SS_Voice.trimKanaDir(location.pathname);
    if (path === "/") {
      path = "/index.html";
    }
    url = encodeURIComponent(SS_Voice.normalizeProtocol(location.protocol) + '://' + location.host + path);
    url = SS_Voice.normalizeLocation(SS_Voice.voiceConfig['location']) + '/' + url;
    return url;
  };

  SS_Voice.trimKanaDir = function (path, kana_dir) {
    if (kana_dir == null) {
      kana_dir = SS_Kana.dir;
    }
    return path.replace(new RegExp('^' + kana_dir.replace('/', '\/') + '\/'), '/');
  };

  SS_Voice.normalizeProtocol = function (protocol) {
    return protocol.replace(new RegExp(':$'), '');
  };

  SS_Voice.normalizeLocation = function (location) {
    return location.replace(new RegExp('/$'), '');
  };

  return SS_Voice;

})();

this.SS_VoiceController = (function () {
  function SS_VoiceController(container) {
    this.status = 'stopped';
    this.container = $(container);
    this.initialized = false;
    this.container.html(this.template());
    this.player = this.container.children('.jp-jplayer');
    this.controller = this.container.children('.jp-audio');
  }

  SS_VoiceController.prototype.play = function (source) {
    this.stop();
    this.status = 'playing';
    this.container.show();
    if (this.initialized) {
      this.player.jPlayer("setMedia", {
        title: document.title,
        mp3: source
      });
      return this.player.jPlayer("play");
    } else {
      return this.player.jPlayer({
        ready: (function (_this) {
          return function () {
            _this.player.jPlayer("setMedia", {
              title: document.title,
              mp3: source
            });
            if (_this.status === 'playing') {
              _this.player.jPlayer("play");
            }
            return _this.initialized = true;
          };
        })(this),
        autoBlur: false,
        cssSelectorAncestor: "#" + this.controller[0].id,
        keyEnabled: false,
        loop: true,
        remainingDuration: true,
        smoothPlayBar: true,
        supplied: "mp3",
        swfPath: <%= SS.config.voice.resource['jplayer_path'].to_json %>,
        toggleDuration: true,
        useStateClassSkin: true
      });
    }
  };

  SS_VoiceController.prototype.stop = function () {
    if (!this.initialized) {
      return;
    }
    if (this.status === 'stopped') {
      return;
    }
    this.player.jPlayer("stop");
    this.container.hide();
    return this.status = 'stopped';
  };

  SS_VoiceController.prototype.template = function () {
    var template = "<div id=\"jquery_jplayer_:TIMESTAMP:\" class=\"jp-jplayer\"></div>\n" +
      "<div id=\"jp_container_:TIMESTAMP:\" class=\"jp-audio\" role=\"application\" aria-label=\"media player\">\n" +
      "  <div class=\"jp-type-single\">\n" +
      "    <div class=\"jp-gui jp-interface\">\n" +
      "      <div class=\"jp-controls\">\n" +
      "        <button class=\"jp-play\" role=\"button\" tabindex=\"0\">play</button>\n" +
      "        <button class=\"jp-stop\" role=\"button\" tabindex=\"0\">stop</button>\n" +
      "      </div>\n" +
      "      <div class=\"jp-progress\">\n" +
      "        <div class=\"jp-seek-bar\">\n" +
      "          <div class=\"jp-play-bar\"></div>\n" +
      "        </div>\n" +
      "      </div>\n" +
      "      <div class=\"jp-volume-controls\">\n" +
      "        <button class=\"jp-mute\" role=\"button\" tabindex=\"0\">mute</button>\n" +
      "        <button class=\"jp-volume-max\" role=\"button\" tabindex=\"0\">max volume</button>\n" +
      "        <div class=\"jp-volume-bar\">\n" +
      "          <div class=\"jp-volume-bar-value\"></div>\n" +
      "        </div>\n" +
      "      </div>\n" +
      "      <div class=\"jp-time-holder\">\n" +
      "        <div class=\"jp-current-time\" role=\"timer\" aria-label=\"time\">&nbsp;</div>\n" +
      "        <div class=\"jp-toggles\">\n" +
      "          <button class=\"jp-repeat\" role=\"button\" tabindex=\"0\">repeat</button>\n" +
      "        </div>\n" +
      "      </div>\n" +
      "      <div class=\"ss-jp-dismiss\">\n" +
      "        <button class=\"ss-jp-close\" role=\"button\" tabindex=\"0\">&times;</button>\n" +
      "      </div>\n" +
      "    </div>\n" +
      "  </div>\n" +
      "</div>";
    var timestamp = (new Date).getTime();

    template = template.replace(new RegExp(":TIMESTAMP:", 'g'), timestamp);
    return template;
  };

  return SS_VoiceController;

})();

this.SS_Recommend = (function () {
  function SS_Recommend() {
  }

  SS_Recommend.render = function () {
    var params, receiver_url, recommend;
    recommend = SS.config["recommend"];
    if (!recommend) {
      return;
    }
    receiver_url = recommend["receiver_url"];
    params = recommend["params"];
    if (!(receiver_url && params)) {
      return;
    }
    params["access_url"] = location.href;
    return $.ajax({
      type: 'GET',
      url: receiver_url,
      cache: false,
      dataType: 'json',
      data: params,
      error: function (req, status, error) {
      }
    });
  };

  return SS_Recommend;

})();

this.SS_Print = (function () {
  function SS_Print() {
  }

  SS_Print.render = function () {
    if (! window.print) {
      $(".btn-ss-print").addClass("unsupported");
    }

    $(document).on("click", ".btn-ss-print", function() {
      try {
        window.print();
        return false;
      } catch (ex) {
        console.info("print is unsupported")
      }
    })
  };

  return SS_Print;

})();

this.SS_ClipboardCopy = (function () {
  function SS_ClipboardCopy() {
  }

  var getText = function(ev) {
    var target = ev.target.dataset.target;
    if (!target) {
      return;
    }

    var text;
    if (target === "css_selector") {
      var selector = ev.target.dataset.selector;
      if (!selector) {
        selector = "title"
      }

      var el = document.querySelector(selector);
      if (el) {
        text = el.text;
      }
    } else {
      // url
      text = location.href
    }

    return text;
  };

  SS_ClipboardCopy.render = function () {
    if (! navigator.clipboard) {
      $(".btn-ss-clipboard-copy").addClass("unsupported");
    }

    $(document).on("click", ".btn-ss-clipboard-copy", function(ev) {
      try {
        var text = getText(ev);
        navigator.clipboard.writeText(text || '').then(function() {
          $(".btn-ss-clipboard-copy.copied").removeClass("copied");
          ev.target.classList.add("copied");
        });
        return false;
      } catch (_ex) {
        console.info("copy to clipboard is unsupported");
      }
    });

    $(document).on("copy cut", function() {
      $(".btn-ss-clipboard-copy.copied").removeClass("copied");
    });
  };

  return SS_ClipboardCopy;

})();
