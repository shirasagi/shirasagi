//= require jquery
//= require jquery_ujs
//= require jquery-ui/widgets/sortable
//= require jquery-ui/widgets/draggable
//= require jquery-ui/widgets/droppable
//= require jquery-ui/widgets/autocomplete
//= require js.cookie
//= require jquery.form
//= require jquery.datetimepicker
//= require jquery.multi-select
//= require jquery.colorbox-min.js
//= require jquery.minicolors
//= require jquery.autosize
//= require marked
//= require starts-with/startswith.js
//= require string-repeat/repeat.js
//= require_self
//= require ss/lib/form
//= require ss/lib/font
//= require ss/lib/module
//= require ss/lib/login
//= require ss/lib/addon_tabs
//= require ss/lib/addon/markdown
//= require ss/lib/addon/temp_file
//= require ss/lib/image_editor
//= require ss/lib/list_ui
//= require ss/lib/tree_ui
//= require ss/lib/tree_navi
//= require ss/lib/mobile
//= require ss/lib/search_ui
//= require ss/lib/tooltips
//= require ss/lib/dropdown
//= require ss/lib/clipboard
//= require ss/lib/color
//= require ss/lib/workflow
//= require ss/lib/sortable_form
//= require ss/lib/text_zoom
//= require ss/lib/popup_notice
//= require ss/lib/cascade_menu
//= require cms/lib/editor
//= require cms/lib/form
//= require cms/lib/edit_lock
//= require cms/lib/source_cleaner
//= require cms/lib/template_form
//= require event/lib/form
//= require map/googlemaps/map
//= require map/googlemaps/form
//= require map/googlemaps/facility/search
//= require map/googlemaps/member/photo/form
//= require map/openlayers/map
//= require map/openlayers/form
//= require map/openlayers/facility/search
//= require map/openlayers/member/photo/form
//= require webmail/lib/mail
//= require webmail/lib/address
//= require cropperjs/cropper.min.js
//= require service/lib/quota.js
//= require flexibility-1.0.6.js
//= require cms/lib/readable_setting
//= require bxslider

//#
//  $(".js-date").datetimepicker { lang: "ja", timepicker: false, format: "Y/m/d" }
//#
$(function () {
  var addCurrent, crumbs, link, menu, path;
  $.ajaxSetup({
    // prevent caching ajax response. see #596.
    cache: false,
    global: true
  });
  // headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') }
  SS.render();
  // head
  if ($(window).width() >= 800 && 0) {
    menu = $("#head .pulldown-menu");
    link = menu.find("a");
    menu.each(function () {
      link.not(".current").hide();
      return link.filter(".current").prependTo(menu).click(function () {
        link.not(".current").slideToggle("fast");
        return false;
      });
    });
  }
  //crumbs
  crumbs = $('#crumbs a[href]').map(function () {
    return $(this).attr('href');
  });
  crumbs = crumbs.get();
  crumbs.shift();
  // navi
  path = location.pathname + "/";
  addCurrent = function (selector) {
    var added;
    added = false;
    $($(selector).get().reverse()).each(function () {
      var href;
      menu = $(this);
      href = menu.attr('href');
      if (path.match(new RegExp('^' + href + '(\/|$)')) || crumbs.indexOf(href) !== -1) {
        menu.addClass("current").parent().addClass("current");
        added = true;
        return false;
      }
    });
    return added;
  };
  addCurrent("#navi .mod-navi a") || addCurrent("#navi .main-navi a");
  $('#navi .main-navi h3.current').parent().prev('h2').addClass('current');
  // navi
  $('.sp-menu-button a').click(function (e) {
    $('#navi').slideToggle();
    $(this).toggleClass("active");
    return false;
  });
  //dropdown
  $(".dropdown-toggle").click(function (e) {
    var $dropdown, $target, $this, ref;
    $this = $(this);
    $target = $(e.target);
    ref = $this.data('ref');
    if (ref) {
      $dropdown = $this.find(ref);
    } else {
      $dropdown = $target.closest('.dropdown');
    }
    $(".dropdown").not($dropdown.get(0)).each(function () {
      $(this).removeClass('active');
      return $(this).find('.dropdown-menu').removeClass('active');
    });
    //select
    $dropdown.toggleClass('active');
    $dropdown.find('.dropdown-menu').toggleClass('active');
    // popup_notice
    SS_PopupNotice.closePopup();
    return e.stopPropagation();
  });
  $(document).click(function (e) {
    $(".dropdown").removeClass('active');
    return $(".dropdown-menu").removeClass('active');
  });
  $("select").change(function () {
    if ($(this).val() === "") {
      return $(this).addClass("blank-value has-blank-value");
    } else {
      return $(this).removeClass("blank-value");
    }
  });
  $("select").change();
  SS_ListUI.render("table.index");
  SS_Mobile.render();
  SS_AddonTabs.render();
  SS_Tooltips.render(".tooltip");
  SS_SearchUI.render();
  SS_Color.render();
  SS_TextZoom.render();
  SS_PopupNotice.render();
  return SS_CascadeMenu.render();
});

this.SS = (function () {
  function SS() {
  }

  SS.loading = '<img style="vertical-align:middle" src="/assets/img/loading.gif" alt="loading.." border="0" widtth="16" height="11" />';

  SS.config = {};

  SS.noticeTimeoutId = null;

  SS.disableClick = function (el) {
    if (el.data('clicked')) {
      return false;
    }
    el.data('clicked', true);
    return true;
  };

  SS.render = function (box) {
    if (box == null) {
      box = null;
    }
    if (box) {
      this.renderInBox(box);
    } else {
      this.renderNotInBox();
    }
    //default
    box = $(document);
    //eternal links
    box.find("a[href^=http]").each(function () {
      return $(this).addClass("external");
    });
    this.renderAjaxBox();
    return this.renderDateTimePicker();
  };

  SS.renderNotInBox = function () {
    return SS_Login.render();
  };

  SS.renderInBox = function (box) {
    var anchorCallback;
    anchorCallback = function () {
      return $("#cboxLoadedContent a").each(function () {
        var elem;
        elem = $(this);
        elem.addClass("cboxElement");
        if (!elem.attr("target") && !elem.data("target")) {
          return elem.colorbox({
            fixed: true,
            width: "90%",
            height: "90%",
            onComplete: anchorCallback
          });
        }
      });
    };
    return $(box).find("a").each(function () {
      var elem;
      elem = $(this);
      if (!elem.attr("target") && !elem.data("target")) {
        return elem.colorbox({
          fixed: true,
          width: "90%",
          height: "90%",
          onComplete: anchorCallback
        });
      }
    });
  };

  SS.ajaxForm = function (elem, params) {
    var defaults;
    if (params == null) {
      params = {};
    }
    elem = $(elem);
    defaults = {
      url: elem.attr("action") + ".json",
      dataType: "json",
      success: function () {
      },
      error: function (data, status) {
        alert(["== Error =="].concat(data.responseJSON).join("\n"));
      }
    };
    elem.on("submit", function (e) {
      $(this).ajaxSubmit($.extend(true, defaults, params));
      e.preventDefault();
    });
  };

  SS.ajax = function (elem, params) {
    if (params == null) {
      params = {};
    }
    return $(elem).click(function (e) {
      var defaults, self;
      self = $(this);
      defaults = {
        url: self.attr("href"),
        beforeSend: function () {
          return self.html(SS.loading);
        },
        success: function () {
          return console.log("success");
        },
        error: function (data, status) {
          return alert("== Error ==");
        }
      };
      $.ajax($.extend(true, defaults, params));
      e.preventDefault();
      return false;
    });
  };

  SS.ajaxDelete = function (elem, params) {
    if (params == null) {
      params = {};
    }
    return $(elem).click(function (e) {
      var defaults, self;
      if (!confirm("<%= I18n.t 'ss.confirm.delete' %>")) {
        return false;
      }
      self = $(this);
      defaults = {
        type: "DELETE",
        data: "_method=delete",
        url: self.attr("href") + ".json",
        dataType: "json",
        beforeSend: function () {
          return self.html(SS.loading);
        },
        success: function () {
          if (self.data("remove")) {
            return $(self.data("remove")).remove();
          }
        },
        error: function (data, status) {
          return alert(["== Error =="].concat(data.responseJSON).join("\n"));
        }
      };
      $.ajax($.extend(true, defaults, params));
      e.preventDefault();
      return false;
    });
  };

  SS.notice = function (message, opts) {
    var notice;
    if (opts == null) {
      opts = {};
    }
    SS.clearNotice();
    notice = $('#notice');
    if (!notice.hasClass('js-notice')) {
      notice.addClass('js-notice').click(function () {
        return notice.slideUp('normal');
      });
    }
    notice.find('.wrap').html(message);
    notice.slideDown('normal');
    if (opts) {
      if (opts.timeout === 0) {
        return;
      }
    }
    SS.noticeTimeoutId = setTimeout((function () {
      return $('#notice').slideUp('normal');
    }), 1800);
    return SS.noticeTimeoutId;
  };

  SS.clearNotice = function () {
    var notice;
    if (SS.noticeTimeoutId) {
      clearTimeout(SS.noticeTimeoutId);
      SS.noticeTimeoutId = null;
    }
    notice = $('#notice');
    notice.hide();
    return notice.find('.wrap').html('');
  };

  SS.confirmUnloading = function () {
    var changed;
    changed = false;
    $("input[type=text],textarea,select").change(function () {
      return changed = true;
    });
    $(window).on("beforeunload", function () {
      if (changed) {
        return "<%= I18n.t 'ss.confirm.unload' %>";
      }
    });
    return $("input[type=submit]").click(function () {
      changed = false;
      return true;
    });
  };

  SS.randomPassword = function (length) {
    var chars, i, j, pass, ref1;
    if (length == null) {
      length = 8;
    }
    chars = 'abcdefghijkmnopqrstuvwxyz!@#$%&-+ABCDEFGHIJKLMNOP234567890';
    pass = '';
    for (i = j = 0, ref1 = length; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
      i = Math.floor(Math.random() * chars.length);
      pass += chars.charAt(i);
    }
    return pass;
  };

  SS.fileCheck = function () {
    return $('#item_files').change(function () {
      var form, uri;
      form = $(this).val();
      if (!form) {
        $(".js-uploader-alert-message").hide();
        return;
      }
      uri = location.pathname.split("/");
      return $.ajax({
        type: "get",
        url: uri.join("/"),
        dataType: "json",
        data: {
          "do": "check",
          item_files: form
        },
        success: function (data) {
          if (data["message"]) {
            $(".js-uploader-alert-message").html(data["message"]);
            return $(".js-uploader-alert-message").show();
          } else {
            return $(".js-uploader-alert-message").hide();
          }
        },
        error: function (xhr, status) {
          var errors;
          try {
            errors = $.parseJSON(xhr.responseText);
            return alert(["== Error =="].concat(errors).join("\n"));
          } catch (_error) {
            return alert(["== Error =="].concat(xhr["statusText"]).join("\n"));
          }
        }
      });
    });
  };

  SS.renderAjaxBox = function (box) {
    if (box == null) {
      box = $(document);
    }
    return box.find(".ajax-box").each(function () {
      var elem;
      elem = $(this);
      if (elem.hasClass("cboxElement")) {
        return true;
      }
      if (!elem.attr("target") && !elem.data("target")) {
        return elem.colorbox({
          fixed: true,
          width: "90%",
          height: "90%"
        });
      }
    });
  };
  // datetimepicker

  SS.renderDateTimePicker = function () {
    $.datetimepicker.setLocale('ja');
    if ($.support.opacity) {
      $.each($(".js-date"), function () {
        var data, opts;
        opts = {
          timepicker: false,
          format: 'Y/m/d',
          closeOnDateSelect: true,
          scrollInput: false
        };
        data = $(this).data();
        if (data.minDate !== null) {
          opts.minDate = data.minDate;
        }
        if (data.maxDate !== null) {
          opts.maxDate = data.maxDate;
        }
        return $(this).datetimepicker(opts);
      });
      return $.each($(".js-datetime"), function () {
        var data, opts;
        opts = {
          roundTime: 'ceil',
          step: 30
        };
        data = $(this).data();
        if (data.minDate !== null) {
          opts.minDate = data.minDate;
        }
        if (data.maxDate !== null) {
          opts.maxDate = data.maxDate;
        }
        return $(this).datetimepicker(opts);
      });
    }
  };

  return SS;

})();
