<%= coffee do %>
$ ->
  $(document).on "click", ".update-item", (e) ->
    approvers = []
    $(".workflow-multi-select").each (e) ->
      approvers = approvers.concat($(this).val())
    $("input[name='workflow_approvers']").each (e) ->
      approvers.push($(this).prop("value"))
    if approvers.length == 0 && $(this).attr("type") == "request"
      alert "<%= @model.t :workflow_approvers %><%= t("errors.messages.not_select") %>"
      return
    required_counts = []
    $("input[name='workflow_required_counts']").each (e) ->
      required_counts.push($(this).prop("value"))
    uri = location.pathname.split("/")
    uri[2] = "workflow" + "<%= @cur_node? @cur_node.id : "" %>"
    uri[3] = "pages"
    updatetype = $(this).attr("updatetype")
    redirect_location = "<%= @item.try(:branch?) ? @item.master.private_show_path : "" %>"
    if updatetype == "request"
      forced_update_option = $("#forced-request").prop("checked")
    else
      forced_update_option = $("#forced-update").prop("checked")
    $.ajax
      type: "post"
      url: uri.join("/")  + "/" + updatetype + "_update"
      async: false
      data:
        workflow_comment: $("#workflow_comment").prop("value")
        workflow_approvers: approvers
        workflow_required_counts: required_counts
        remand_comment: $("#remand_comment").prop("value")
        url: "<%= request.url %>"
        forced_update_option: forced_update_option
      success: (data) ->
        if data["workflow_alert"]
          alert data["workflow_alert"]
          return
        if data["workflow_state"] == "approve" && redirect_location != ""
          location.href = redirect_location
        else
          location.reload()
      error: (xhr, status) ->
        try
          errors = $.parseJSON(xhr.responseText)
          alert(["== Error =="].concat(errors).join("\n"));
        catch
          alert(["== Error =="].concat(xhr["statusText"]).join("\n"));

  $(".mod-workflow-approve").insertBefore("#addon-basic")

  $(".mod-workflow .toggle-label").on "click", (e) ->
    $(".mod-workflow .request-setting").slideToggle()
    return false

  $(".workflow-partial-section").each ->
    uri = location.pathname.split("/")
    uri[2] = "workflow" + "<%= @cur_node? @cur_node.id : "" %>"
    uri[3] = "wizard"
    uri = uri.join("/")
    $.ajax
      type: "get"
      url: uri
      async: false
      success: (html, status) ->
        $(".workflow-partial-section").html(html)
      error: (msg, status) ->
        alert(["== Error =="].concat(msg["statusText"]).join("\n"));

<% end %>

<div class="mod-workflow">

  <% if @item.state == "closed" %>
    <% if @item.allowed?(:approve, @cur_user) && @item.workflow_state == "request" %>
      <% @item.workflow_approvers_at(@item.workflow_current_level).each do |workflow_approver| %>
        <% next if @cur_user._id != workflow_approver[:user_id] || workflow_approver[:state] != "request" %>
        <section class="mod-workflow-approve">
          <div class="addon-view">
            <div class="addon-head">
              <h2><%= t("workflow.buttons.approve") %>/<%= t("workflow.buttons.remand") %><%= @model.tt :approve_remand %></h2>
            </div>
            <div class="addon-body">
              <%= text_area :remand, :comment, value: "" %>
              <div class="buttons">
                <%= button_tag t("workflow.buttons.approve"), { updatetype: :approve, class: "update-item btn-primary" } %>
                <%= button_tag t("workflow.buttons.remand"), { updatetype: :remand, class: "update-item btn-default" } %>
              </div>
              <div class="checkbox">
                <% force = @cur_site.forced_update rescue nil %>
                <% if force == "enabled" %>
                <%= check_box_tag 'forced-update', true, true, class: 'forced' %><%= t("errors.messages.forced_update") %>
                <% else %>
                <%= check_box_tag 'forced-update', true, false, class: 'forced' %><%= t("errors.messages.forced_update") %>
                <% end %>
              </div>
            </div>
          </div>
        </section>
      <% end %>
    <% end %>

    <% if @item.allowed?(:edit, @cur_user) && @item.workflow_member.blank? %>
      <% if @item.try(:cloned_name?) %>
        <section class="mod-workflow-request">
          <h1><%= t("errors.messages.invalid_approve_name") %></h1>
        </section>
      <% else %>
        <section class="mod-workflow-request">
          <div class="see request-setting workflow-partial-section"></div>
        </section>
      <% end %>
    <% end %>
  <% end %>

  <% if @item.workflow_state? %>
  <div class="mod-workflow-view">
    <dl class="see">
      <% if @item.workflow_state == "cancelled" %>

        <dt><%= @model.t :workflow_state %></dt>
        <dd><%= t("workflow.state.#{@item.workflow_state}") if @item.workflow_state.present? %></dd>
        <dd><%= t("workflow.request_cancelled_message") %></dd>

      <% else %>

        <dt><%= @model.t :workflow_user_id %></dt>
        <dd>
          <% if @item.workflow_member.present? %>
            <%= "#{@item.workflow_member.name}(#{t("workflow.member")})" %>
          <% elsif @item.workflow_user.present? %>
            <%= "#{@item.workflow_user.long_name}(#{@item.workflow_user.email})" %>
          <% else %>
            <%= t("workflow.user_deleted") %>
          <% end %>
        </dd>

        <dt><%= @model.t :workflow_state %></dt>
        <dd><%= t("workflow.state.#{@item.workflow_state}") if @item.workflow_state.present? %></dd>

        <% if @item.workflow_comment.present? %>
          <dt><%= @model.t :workflow_comment %></dt>
          <dd><%= @item.workflow_comment %></dd>
        <% end %>

        <dt><%= @model.t :workflow_approvers %></dt>
        <dd>
          <% @item.workflow_approvers.each do |workflow_approver| %>
            <% user  = SS::User.where(id: workflow_approver[:user_id]).first %>
            <% state = t("workflow.state.#{workflow_approver[:state]}") %>
            <% if user %>
              <%= "#{workflow_approver[:level]}:#{user.long_name}(#{user.email})：#{state}" %><br /><%= workflow_approver[:comment] %><br />
            <% else %>
              <%= "#{workflow_approver[:level]}:#{t("workflow.user_deleted")}：#{state}" %><br /><%= workflow_approver[:comment] %><br />
            <% end %>
          <% end if @item.workflow_approvers.present? %>
        </dd>

      <% end %>
    </dl>
  </div>
  <% end %>

</div>
