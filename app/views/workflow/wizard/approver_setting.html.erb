<%

user_class = @item.approver_user_class
group_class = user_class.group_class
users = user_class.where(:group_ids.in => group_class.site(@cur_site).pluck(:id), :_id.ne => @cur_user._id)

%>
<%= coffee do %>
$ ->

  $(".workflow-route-cacnel").on "click", (e) ->
    uri = location.pathname.split("/")
    uri[2] = "workflow" + "<%= @cur_node? @cur_node.id : "" %>"
    uri[3] = "wizard"
    uri = uri.join("/")
    $.ajax
      type: "get"
      url: uri
      async: false
      success: (html, status) ->
        $(".workflow-partial-section").html(html)
      error: (xhr, status) ->
        try
          errors = $.parseJSON(xhr.responseText)
          alert(["== Error =="].concat(errors).join("\n"));
        catch
          alert(["== Error =="].concat(xhr["statusText"]).join("\n"));
    e.preventDefault()

  $(".workflow-multi-select").multiSelect
    selectableHeader: "<div class='ms-selectable-head'><%= t "workflow.selectable_users" %></div>"
    selectionHeader: "<div class='ms-selection-head'><%= t "workflow.request_to" %></div>"

<% end %>

<dl class="see request-setting">
  <dt><%= @model.t :workflow_comment %><%= @model.tt :workflow_comment %></dt>
  <dd><%= text_area :workflow, :comment, value: @item.workflow_comment %></dd>
  <% userids = [] %>
  <% @item.workflow_approvers.each {|workflow_approver| userids << workflow_approver[:user_id]} if @item.workflow_approvers.present? %>
  <dt><%= @model.t :workflow_approvers %><%= @model.tt :workflow_approvers %></dt>
  <dd>
    <%= hidden_field_tag "workflow_required_counts", false %>
    <select class="workflow-multi-select" multiple="multiple" name="multiselect">
      <% users.each do |user| %>
        <% next unless @item.allowed?(:approve, user, site: @cur_site) %>
        <% next unless user.enabled? %>
        <option value="1,<%= user._id %>,pending," <%= 'selected="selected"' if userids.index(user._id) %>>
          <%= "#{user.long_name}(#{user.email})" %></option>
      <% end %>
    </select>
  </dd>
  <dd>
    <div class="buttons">
      <%= button_tag t("workflow.buttons.request"), { updatetype: :request, class: "update-item btn-primary" } %>
      <%= button_tag t("workflow.buttons.cancel"), { class: "workflow-route-cacnel btn-default" } %>
    </div>
    <div class="checkbox">
      <% force = @cur_site.forced_update rescue nil %>
      <% if force == "enabled" %>
      <%= check_box_tag 'forced-request', true, true, class: 'forced' %><%= t("errors.messages.forced_update") %>
      <% else %>
      <%= check_box_tag 'forced-request', true, false, class: 'forced' %><%= t("errors.messages.forced_update") %>
      <% end %>
    </div>
  </dd>
</dl>
