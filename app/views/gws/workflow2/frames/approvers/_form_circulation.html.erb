<% return if @item.deleted? || @item.workflow_circulations.blank? %>

<% render_circulation_row = proc do |_level, user_type, user_id, user_name| %>
  <tr data-type="<%= user_type %>" data-id="<%= user_id %>">
    <td>
      <%= user_name %>
    </td>
  </tr>
<% end %>

<% render_circulation_error_row = proc do |_level, error| %>
  <tr data-type="error" data-id="error">
    <td><div class="style-em"><%= error %></div></td>
  </tr>
<% end %>

<dl class="see workflow_circulations">
  <dt><%= @model.t :workflow_circulations %><%= @model.tt :workflow_circulations %></dt>
  <dd></dd>

  <% 1.upto(Gws::Workflow2::Route::MAX_CIRCULATIONS) do |level| %>
    <%
      circulations = @item.workflow_circulations_at(level)
      next if circulations.blank?
    %>
    <dt class="depth-2"><%= t("workflow.circulation_step") %> <%= Gws::Workflow2::Route.t :level, level: level %></dt>
    <dd class="depth-2">
      <table class="index gws-workflow-grid-table" data-col="2">
        <tbody>
        <tr>
          <th scope="col"><%= @model.t :workflow_circulation_attachment_uses %></th>
          <td>
            <%=
              selected_attachment_use = route.try(:circulation_attachment_use_at, level).presence || "disabled"
              Gws::Workflow2::Route.circulation_attachment_use_options.find { |_label, value| value == selected_attachment_use }.try(:[], 0)
            %>
          </td>
        </tr>
        </tbody>
      </table>
    </dd>

    <dd class="depth-2">
      <%= tag.div class: "gws-workflow-file-circulation-item", data: { level: level } do %>
        <table class="index gws-workflow-grid-table" data-col="1">
          <thead>
          <tr>
            <th class="name"><span><%= Gws::User.t :name %></span></th>
          </tr>
          </thead>
          <tbody>
          <%
            circulations.each do |circulation_hash|
              if circulation_hash[:error].present?
                render_circulation_error_row.call(level, circulation_hash[:error])
                next
              end

              case circulation_hash[:user_type]
              when "superior"
                user = circulation_hash[:user]
                user ||= find_circulator(circulation_hash[:user_id])
                user_type = "superior"
                name = "#{gws_public_user_long_name(user.long_name)} (#{t("mongoid.attributes.gws/addon/user/affair_setting.gws_superior_user_ids")})"
              when Gws::UserTitle.name
                user = circulation_hash[:user]
                user ||= find_circulator(circulation_hash[:user_id])
                user_type = Gws::UserTitle.name
                name = "#{gws_public_user_long_name(user.long_name)} (#{Gws::UserTitle.model_name.human})"
              when Gws::UserOccupation.name
                user = circulation_hash[:user]
                user ||= find_circulator(circulation_hash[:user_id])
                user_type = Gws::UserOccupation.name
                name = "#{gws_public_user_long_name(user.long_name)} (#{Gws::UserOccupation.model_name.human})"
              else # Gws::User.name
                user = circulation_hash[:user]
                user ||= find_circulator(circulation_hash[:user_id])
                user_type = Gws::User.name
                name = gws_public_user_long_name(user.long_name)
              end

              if user_type
                render_circulation_row.call(level, user_type, user.id, name)
              end
            end
          %>
          </tbody>
        </table>
      <% end %>
    </dd>
  <% end %>
</dl>
