<%= jquery do %>
  var setIntervalStep = function(ele) {
    if ($(ele).val() == "minutes"){
      $(ele).closest("tr").find(".interval").attr("step", 10);
    }
    else {
      $(ele).closest("tr").find(".interval").attr("step", 1);
    }
  };
  var changeIntervalStep = function(newItem) {
    $(newItem).find(".interval_type").on("change", function() {
      setIntervalStep(this);
    });
  };

  var setIntervalMax = function(ele) {
    var max = <%= @model::INTERVAL_MAX_BASE %>;
    switch ($(ele).val()) {
      case 'weeks':
        max /= 7;
      case 'days':
        max /= 24;
      case 'hours':
        max /= 60;
    }
    $(ele).closest("tr").find(".interval").attr("max", max);
  };
  var changeIntervalMax = function(newItem) {
    $(newItem).find(".interval_type").on("change", function() {
      setIntervalMax(this);
    });
  };

  var sort = new SS_SortableForm('.reminder-conditions', { limit: 5, onInsert: function(newItem) {
    changeIntervalStep(newItem);
    changeIntervalMax(newItem);
  }});
  if (<%== @item.reminder_conditions(@cur_user).to_json %>.length) {
    sort.body.find('tr').remove();
  }
  sort.renderItems(<%== @item.reminder_conditions(@cur_user).to_json %>);

  $("#gws-addon-reminder-set").on("click", function() {
    $(".reminder-conditions tr .interval").attr("step", 1);
    setTimeout(function () {
      $(".reminder-conditions tr").each(function() { changeIntervalStep(this); });
    }, 0);
  });

  $(".reminder-conditions tr .interval").on('focusout', function() {
    if ($(this).closest("tr").find(".interval_type").val() == "minutes"){
      $(this).val(Math.round($(this).val() / 10) * 10);
    }
  });

  SS.ajaxForm("#ajax-form", {
    beforeSend: function(xhr, settings) {
      SS.clearNotice();
    },
    success: function(data) {
      sort.resetItems();
      if (data["reminder_conditions"].length) {
        sort.body.find('tr').remove();
      }
      sort.renderItems(data["reminder_conditions"]);
      $(".reminder-conditions tr").each(function() { changeIntervalStep(this); });
      $(".reminder-conditions tr").each(function() { changeIntervalMax(this); });
      $(".reminder-conditions tr .interval_type").each(function() { setIntervalStep(this) });
      $(".reminder-conditions tr .interval_type").each(function() { setIntervalMax(this) });
      SS.notice('<%= t('gws/reminder.notification.created') %>');
    },
    error: function(data) { alert("Error"); }
  });
  $(".reminder-conditions tr").each(function() { changeIntervalStep(this); });
  $(".reminder-conditions tr").each(function() { changeIntervalMax(this); });
  $(".reminder-conditions tr .interval_type").each(function() { setIntervalStep(this) });
  $(".reminder-conditions tr .interval_type").each(function() { setIntervalMax(this) });
<% end %>

<%= form_for :item, url: gws_apis_reminders_path, html: { id: "ajax-form", multipart: true, autocomplete: :off } do %>

<dl class="see gws-addon-reminder">
  <dt>
    <%= hidden_field_tag "item_name", @item.reference_name %>
    <%= hidden_field_tag "item_model", @item.reference_model %>
    <%= hidden_field_tag "item_id", @item.id %>
    <span class="gws-addon-reminder-label"><%= @item.t :reminder_date %></span>
    <%= @model.tt :reminder_date %>
  </dt>
  <dd>
    <% if @item.allday == "allday" %>
    <table class="reminder-conditions">
      <tbody>
      <tr data-base="true">
        <td><%= select_tag 'item[in_reminder_conditions][][state]', options_for_select(@item.reminder_notify_state_options), class: "state" %></td>
        <td><%= number_field_tag 'item[in_reminder_conditions][][interval]', 1, step: 1, min: 0, max: @model::INTERVAL_MAX_BASE, class: "interval" %></td>
        <td><%= select_tag 'item[in_reminder_conditions][][interval_type]', options_for_select(@item.reminder_interval_type_allday_options), class: "interval_type" %></td>
        <td><%= select_tag 'item[in_reminder_conditions][][base_time]', options_for_select(@item.reminder_base_time_options), class: "base_time" %></td>
      </tr>
      </tbody>
    </table>
    <% else %>
    <table class="reminder-conditions">
      <tbody>
      <tr data-base="true">
        <td><%= select_tag 'item[in_reminder_conditions][][state]', options_for_select(@item.reminder_notify_state_options), class: "state" %></td>
        <td><%= number_field_tag 'item[in_reminder_conditions][][interval]', 10, step: 10, min: 0, max: @model::INTERVAL_MAX_BASE, class: "interval" %></td>
        <td><%= select_tag 'item[in_reminder_conditions][][interval_type]', options_for_select(@item.reminder_interval_type_options), class: "interval_type" %></td>
      </tr>
      </tbody>
    </table>
    <% end %>
    <%= button_tag t("gws/reminder.buttons.register_reminder"), id: "gws-addon-reminder-set", class: "btn" %>
  </dd>
</dl>

<% end %>
