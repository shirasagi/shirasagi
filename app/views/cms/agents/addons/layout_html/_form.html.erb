<%= code_editor ".mod-cms-html-form textarea", mode: :html %>

<%= jquery do %>
  Cms_Form.render();

  Cms_Form.editorId = "item_html";
  Cms_Form.getEditorHtml = function() {
    console.log("[DEBUG] Cms_Form.getEditorHtml が呼び出されました");
    return "<div>" + $("#item_html").val() + "</div>";
  };
  Cms_Form.setEditorHtml = function(html) {
    console.log("[DEBUG] Cms_Form.setEditorHtml が呼び出されました: ", html);
    html = html.replace(/<div>([\s\S]*)<\/div>/m, "$1");
    $("#item_html").val(html);
  };

  Syntax_Checker.url = <%= raw cms_apis_check_syntax_check_path(format: "json").to_json %>;
  Syntax_Checker.correct_url = <%= raw cms_apis_correct_syntax_check_path(format: "json").to_json %>;

  // 自動修正処理のためのAJAXインターセプター
  var originalAjax = $.ajax;
  $.ajax = function(options) {
    if (options.url === Syntax_Checker.correct_url) {
      console.log("[DEBUG] 自動修正APIへのリクエスト:", options);
    }
    return originalAjax.apply(this, arguments);
  };

  // 自動修正ボタンのイベントハンドラをデバッグ
  $(document).on("click", ".correct, .btn-auto-correct", function(e) {
    console.log("[DEBUG] 自動修正ボタンがクリックされました", this);
  });

  // ResultBox.appendMessageをモンキーパッチして自動修正ボタンの処理をデバッグ
  var originalAppendMessage = Syntax_Checker.resultBox && Syntax_Checker.resultBox.appendMessage;
  function injectAppendMessageDebug() {
    if (Syntax_Checker.resultBox && Syntax_Checker.resultBox.appendMessage && Syntax_Checker.resultBox.appendMessage !== debugAppendMessage) {
      originalAppendMessage = Syntax_Checker.resultBox.appendMessage;
      Syntax_Checker.resultBox.appendMessage = debugAppendMessage;
    }
  }
  
  function debugAppendMessage(ul, checks, errors) {
    console.log("[DEBUG] appendMessage が呼び出されました");
    console.log("[DEBUG] checks:", checks);
    console.log("[DEBUG] errors:", errors);
    return originalAppendMessage.apply(this, arguments);
  }

  // Syntax_Checkerをレンダリング
  Syntax_Checker.render(Cms_Form);
  
  <% if @syntax_check_context && @syntax_check_context.errors.present? %>
  $(function() {
    console.log("[DEBUG] サーバーサイドのエラー結果を表示します");
    
    // EDITORタイプのチェックオブジェクトを作成
    var check = {
      id: "html",
      name: "<%= t("modules.addons.cms/body_layout_html") %>",
      resolve: "html",
      type: "string",
      getContent: function() {
        console.log("[DEBUG] check.getContent が呼び出されました");
        return Cms_Form.getEditorHtml();
      },
      setContent: function(content) {
        console.log("[DEBUG] check.setContent が呼び出されました: ", content);
        return Cms_Form.setEditorHtml(content);
      }
    };
    
    // エラー情報を設定
    Syntax_Checker.errors = <%= raw @syntax_check_context.errors.to_json %>;
    console.log("[DEBUG] エラー数: ", Syntax_Checker.errors.length);
    
    // サーバーから取得したエラー情報に自動修正用のcollector属性があるか確認
    var hasCollector = false;
    $.each(Syntax_Checker.errors, function(i, error) {
      if (error.collector) {
        hasCollector = true;
        console.log("[DEBUG] collector属性を持つエラーがあります:", error.collector);
      }
    });
    
    // ResultBox.appendMessageのオーバーライドを実行
    injectAppendMessageDebug();
    
    // エラー表示
    Syntax_Checker.resultBox.showResult([check], Syntax_Checker.errors);
    
    // 自動修正ボタンの状態確認
    setTimeout(function() {
      var btns = $('.correct, .btn-auto-correct');
      console.log("[DEBUG] 自動修正ボタン数:", btns.length);
      if (btns.length === 0 && hasCollector) {
        console.log("[DEBUG] 警告: collector属性があるのにボタンが表示されていません");
      }
    }, 1000);
  });
  <% end %>
<% end %>

<dl class="see mod-cms-body" data-syntax-check="editor">
  <dt class="wide"><%= @model.t :html %><%= @model.tt :html %></dt>
  <dd class="wide">
    <%= f.text_area :html, style: "height: 400px", data: { syntax_check: 'editor', syntax_check_name: t("modules.addons.cms/body_layout_html") } %>

    <% if example = @item.try(:form_example_layout_html) %>
      <div class="form-example">
        <div class="form-example-head example-layout-html"><%= t 'ss.input_example' %></div>
        <div class="form-example-body example-layout-html"><%= example %></div>
      </div>
    <% end %>
  </dd>
</dl>
