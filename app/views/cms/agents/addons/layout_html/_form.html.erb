<% addon ||= local_assigns.fetch(:addon, {})%>

<%= jquery do %>
  var $form = $('.mod-cms-html-form');
  var $loopSnippetSelect = $form.find('.js-loop-snippet-select');

  // スニペット貼り付け機能
  var loopSettingHtmlMap = {};
  <% Cms::LoopSetting.site(@cur_site).liquid.each do |ls| %>
    loopSettingHtmlMap['<%= ls.id %>'] = <%= (ls.html || '').to_json.html_safe %>;
  <% end %>

  var getCodeMirrorInstance = function($textarea) {
    if (!$textarea || !$textarea.length) { return null; }
    var cm = $textarea.data('editor');
    if (cm) { return cm; }
    var cmEl = $textarea.next('.CodeMirror')[0];
    if (cmEl && cmEl.CodeMirror) { return cmEl.CodeMirror; }
    return null;
  };

  var insertSnippetAtCursor = function($textarea, snippetHtml, attempt) {
    attempt = attempt || 0;
    if (!$textarea.length) { return; }

    var cm = getCodeMirrorInstance($textarea);
    if (cm && typeof cm.getDoc === 'function') {
      var doc = cm.getDoc();
      var cursor = doc.getCursor();
      
      // カーソル位置にスニペットを挿入
      doc.replaceRange(snippetHtml, cursor);
      
      // カーソル位置をスニペット挿入後に移動
      var newCursor = { line: cursor.line, ch: cursor.ch + snippetHtml.length };
      doc.setCursor(newCursor);
      cm.focus();
      
      $textarea.val(doc.getValue());
      return;
    }

    // CodeMirrorが利用できない場合のフォールバック
    var currentText = $textarea.val() || '';
    var selectionStart = $textarea[0].selectionStart;
    var selectionEnd = $textarea[0].selectionEnd;
    
    // カーソル位置にスニペットを挿入
    var newText = currentText.substring(0, selectionStart) + 
                  snippetHtml + 
                  currentText.substring(selectionEnd);
    
    $textarea.val(newText);
    
    // カーソル位置をスニペット挿入後に移動
    var newCursorPos = selectionStart + snippetHtml.length;
    $textarea[0].setSelectionRange(newCursorPos, newCursorPos);
    $textarea.focus();
    
    if (attempt < 10) {
      setTimeout(function() { insertSnippetAtCursor($textarea, snippetHtml, attempt + 1); }, 50);
    }
  };

  var handleSnippetInsert = function($select, state) {
    state = state || {};
    var attempt = state.attempt || 0;
    var selectedLoopSettingId = state.snippetId || $select.val();
    if (!selectedLoopSettingId) {
      return;
    }

    $select.data('loopSnippetPendingId', selectedLoopSettingId);

    var snippetHtml = loopSettingHtmlMap[selectedLoopSettingId];
    if (snippetHtml === undefined) {
      $select.val('');
      $select.removeData('loopSnippetPendingId');
      return;
    }

    var hiddenFieldSelector = $select.data('loopSnippetHiddenField') || "input[name='item[loop_setting_id]']";
    if (hiddenFieldSelector) {
      var $hiddenField = $(hiddenFieldSelector);
      if ($hiddenField.length) {
        $hiddenField.prop('disabled', false).val(selectedLoopSettingId).trigger('change');
      }
    }

    var targetSelector = $select.data('loopSnippetTarget');
    var $htmlArea = targetSelector ? $(targetSelector) : $();
    insertSnippetAtCursor($htmlArea, snippetHtml, attempt);

    // Don't clear the select box to preserve the value for form submission
    $select.removeData('loopSnippetPendingId');
  };

  var bindLoopSnippetSelect = function($select) {
    if (!$select || !$select.length) { return; }

    $select.on('change', function() {
      handleSnippetInsert($select, { attempt: 0 });
    });

    var $parentForm = $select.closest('form');
    if ($parentForm.length) {
      $parentForm.on('submit', function() {
        var pendingId = $select.data('loopSnippetPendingId');
        var currentVal = $select.val();
        var snippetId = pendingId || currentVal;
        if (!snippetId) { 
          // If no snippet is selected, ensure hidden field is cleared
          var hiddenFieldSelector = $select.data('loopSnippetHiddenField') || "input[name='item[loop_setting_id]']";
          var $hiddenField = $(hiddenFieldSelector);
          if ($hiddenField.length) {
            $hiddenField.val('').trigger('change');
          }
          return; 
        }
        handleSnippetInsert($select, { snippetId: snippetId, attempt: 0 });
      });
    }
  };

  bindLoopSnippetSelect($loopSnippetSelect);
<% end %>

<dl class="see mod-cms-html-form">
  <dt class="wide"><%= t('cms.labels.snippets') %></dt>
  <dd class="wide">
    <%= f.hidden_field :loop_setting_id,
      id: "item_loop_setting_id",
      class: 'js-loop-snippet-hidden-field' %>
    <% snippet_options = render(SS::OptionsForSelectComponent.new(options: ancestral_html_settings_liquid)) %>
    <%= select_tag 'loop_snippet_selector',
      safe_join([content_tag(:option, t('cms.input_directly'), value: ''), snippet_options]),
      id: "loop_snippet_selector",
      class: 'js-loop-snippet-select',
      data: {
        loop_snippet_target: '#item_html',
        loop_snippet_hidden_field: "input[name='item[loop_setting_id]']"
      } %>
  </dd>
  <dt class="wide"><%= @model.t :html %><%= @model.tt :html %></dt>
  <dd class="wide">
    <%= f.text_area :html, style: "height: 400px" %>

    <% if example = @item.try(:form_example_layout_html) %>
      <div class="form-example">
        <div class="form-example-head example-layout-html"><%= t 'ss.input_example' %></div>
        <div class="form-example-body example-layout-html"><%= example %></div>
      </div>
    <% end %>
  </dd>
  <%=
    component = Cms::BodyCheckerComponent.new(
      cur_site: @cur_site, cur_user: @cur_user, cur_node: @cur_node, item: @item, limits: %i[syntax link],
      syntax_check_context: @syntax_context
    )
    syntax_checker_form = render(component)
    if syntax_checker_form.present?
      tag.dd syntax_checker_form, class: "wide"
    end
  %>
</dl>

<%= code_editor "##{addon[:id]} textarea", mode: :html %>

<% if @syntax_context&.errors.present? && @cur_user.cms_role_permit_any?(@cur_site, "edit_cms_ignore_syntax_check") %>
  <label>
    <%= check_box_tag "ignore_syntax_check", 1, false, id: nil %>
    <%= t("ss.buttons.ignore_alerts_and_save") %>
  </label>
<% end %>
