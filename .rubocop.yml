inherit_from: .rubocop_todo.yml
require:
  - rubocop-performance
  - rubocop-rails

AllCops:
  # be sure to set minimal support version
  TargetRubyVersion: 3.1
  NewCops: enable
  Exclude:
    - Gemfile
    - Gemfile.lock
    - Guardfile
    - Vagrantfile
    - ",memo/**/*"
    - bin/*
    - config/initializers/new_framework_defaults_*.rb
    - vendor/bundle/**/*
    - vendor/gems/**/*
  SuggestExtensions: false

  # Default formatter will be used if no `-f/--format` option is given.
  DefaultFormatter: fuubar

# Indent private/protected/public as deep as method definitions
Layout/AccessModifierIndentation:
  EnforcedStyle: indent
  SupportedStyles:
    - outdent
    - indent
  # By default, the indentation width from Layout/IndentationWidth is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

Layout/EmptyLineAfterGuardClause:
  Enabled: false

Layout/DefEndAlignment:
  AutoCorrect: false

# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle, SupportedStyles.
Layout/IndentationConsistency:
  # The difference between `rails` and `normal` is that the `rails` style
  # prescribes that in classes and modules the `protected` and `private`
  # modifier keywords shall be indented the same as public methods and that
  # protected and private members shall be indented one step more than the
  # modifiers. Other than that, both styles mean that entities on the same
  # logical depth shall have the same indentation.
  EnforcedStyle: normal
  SupportedStyles:
    - normal
    - rails

# Offense count: 1762
# This cop supports safe autocorrection (--autocorrect).
# Configuration parameters: AllowHeredoc, AllowURI, URISchemes, IgnoreCopDirectives, AllowedPatterns.
# URISchemes: http, https
Layout/LineLength:
  Max: 130

# Cop supports --auto-correct.
Layout/SpaceAfterComma:
  Enabled: true

# Cop supports --auto-correct.
Layout/SpaceBeforeFirstArg:
  # When `true`, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true

# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle, SupportedStyles, EnforcedStyleForEmptyBraces, SpaceBeforeBlockParameters.
Layout/SpaceInsideBlockBraces:
  EnforcedStyle: space
  EnforcedStyleForEmptyBraces: no_space
  SpaceBeforeBlockParameters: true

# Cop supports --auto-correct.
Layout/TrailingWhitespace:
  Enabled: true

Lint/RescueException:
  Enabled: false

# Offense count: 2507
# Configuration parameters: AllowedMethods, AllowedPatterns, CountRepeatedAttributes.
Metrics/AbcSize:
  Max: 68

# Offense count: 5930
# Configuration parameters: CountComments, CountAsOne, AllowedMethods, AllowedPatterns.
# AllowedMethods: refine
Metrics/BlockLength:
  Max: 45

# Offense count: 6
# Configuration parameters: CountBlocks, CountModifierForms.
Metrics/BlockNesting:
  Max: 4

Metrics/ClassLength:
  Enabled: true
  Max: 500

# Offense count: 771
# Configuration parameters: AllowedMethods, AllowedPatterns.
Metrics/CyclomaticComplexity:
  Max: 14

# Offense count: 2629
# Configuration parameters: CountComments, CountAsOne, AllowedMethods, AllowedPatterns.
Metrics/MethodLength:
  Max: 45

Metrics/ModuleLength:
  Enabled: true
  Max: 500

# Offense count: 1
# Configuration parameters: Max, CountKeywordArgs.
Metrics/ParameterLists:
  MaxOptionalParameters: 4

# Offense count: 628
# Configuration parameters: AllowedMethods, AllowedPatterns.
Metrics/PerceivedComplexity:
  Max: 15

Naming/MethodParameterName:
  MinNameLength: 2
  AllowedNames: [ 'f', 'e', 'n' ]

# Offense count: 189
# Configuration parameters: EnforcedStyle, CheckMethodNames, CheckSymbols, AllowedIdentifiers, AllowedPatterns.
# SupportedStyles: snake_case, normalcase, non_integer
# AllowedIdentifiers: capture3, iso8601, rfc1123_date, rfc822, rfc2822, rfc3339, x86_64
Naming/VariableNumber:
  Enabled: false

Rails:
  Enabled: true

# Cop supports --auto-correct.
Rails/Output:
  Enabled: false

# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle, SupportedStyles.
# Checks if usage of `%()` or `%Q()` matches configuration.
Style/BarePercentLiterals:
  EnforcedStyle: bare_percent
  SupportedStyles:
    - percent_q
    - bare_percent

# Configuration parameters: EnforcedStyle, SupportedStyles.
Style/EmptyElse:
  EnforcedStyle: empty
  SupportedStyles:
    - empty
    - nil
    - both

Style/IfInsideElse:
  Enabled: false

Style/MissingElse:
  Enabled: false

# Cop supports --auto-correct.
# Configuration parameters: PreferredDelimiters.
Style/PercentLiteralDelimiters:
  # Specify the default preferred delimiter for all types with the 'default' key
  # Override individual delimiters (even with default specified) by specifying
  # an individual key
  PreferredDelimiters:
    default: ()
    '%i': '[]'
    '%I': '[]'
    '%r': '{}'

# Cop supports --auto-correct.
# Configuration parameters: EnforcedStyle, SupportedStyles.
Style/SignalException:
  EnforcedStyle: only_raise
  SupportedStyles:
    - only_raise
    - only_fail
    - semantic

Style/StringLiteralsInInterpolation:
  Enabled: false

# Cop supports --auto-correct.
Style/RedundantPercentQ:
  Enabled: true

# Cop supports --auto-correct.
# Configuration parameters: WordRegex.
Style/WordArray:
  EnforcedStyle: percent
  SupportedStyles:
    # percent style: %w(word1 word2)
    - percent
    # bracket style: ['word1', 'word2']
    - brackets
  # The `MinSize` option causes the `WordArray` rule to be ignored for arrays
  # smaller than a certain size.  The rule is only applied to arrays
  # whose element count is greater than or equal to `MinSize`.
  MinSize: 0
  # The regular expression `WordRegex` decides what is considered a word.
  WordRegex: !ruby/regexp '/\A[\p{Word}\n\t]+\z/'
